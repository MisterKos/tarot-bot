import logging
import json
import random
import os
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import set_webhook

API_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_PATH = "/webhook"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8080))

logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")
logger = logging.getLogger("tarot-bot")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# === –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–æ–¥—É ===
with open("data/deck.json", "r", encoding="utf-8") as f:
    TAROT_DECK = json.load(f)
logger.info("–ö–æ–ª–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ –∏–∑ data/deck.json")

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def menu_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è"),
           types.KeyboardButton("üíº –†–∞–±–æ—Ç–∞"),
           types.KeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å—ã"))
    return kb

def spreads_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("üîÆ 3 –∫–∞—Ä—Ç—ã"),
           types.KeyboardButton("üåü 5 –∫–∞—Ä—Ç"),
           types.KeyboardButton("‚ú® –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç"))
    return kb

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
user_state = {}

# === –ò—Ç–æ–≥–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã ===
SUMMARY_TEMPLATES = [
    "‚ú® –ò—Ç–æ–≥ —Ä–∞—Å–∫–ª–∞–¥–∞:\n–¢–µ–º–∞: *{theme}*\n–ó–∞–ø—Ä–æ—Å: _{situation}_\n\n"
    "–ö–∞—Ä—Ç—ã —É–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ —Å—É–¥—å–±–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –ì–ª–∞–≤–Ω–æ–µ ‚Äî —Å–ª—É—à–∞—Ç—å —Å–≤–æ—é –∏–Ω—Ç—É–∏—Ü–∏—é –∏ –Ω–µ —Å–ø–µ—à–∏—Ç—å —Å —Ä–µ—à–µ–Ω–∏—è–º–∏.",

    "üåü –ó–∞–∫–ª—é—á–µ–Ω–∏–µ:\n–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É *{theme}*, –æ–ø–∏—Å–∞–ª–∏ –µ—ë —Ç–∞–∫: _{situation}_.\n\n"
    "–†–∞—Å–∫–ª–∞–¥ —Å–æ–≤–µ—Ç—É–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –≥–∞—Ä–º–æ–Ω–∏—é. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ –±—É–¥—É—Ç —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è –≤ –≤–∞—à—É –ø–æ–ª—å–∑—É, –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ.",

    "üîÆ –°–æ–≤–µ—Ç –∫–∞—Ä—Ç:\n–í–∞—à –∑–∞–ø—Ä–æ—Å: _{situation}_ (—Å—Ñ–µ—Ä–∞: *{theme}*).\n\n"
    "–ö–∞—Ä—Ç—ã –≥–æ–≤–æ—Ä—è—Ç –æ –ø–µ—Ä–µ–º–µ–Ω–∞—Ö –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –¥–ª—è —Ä–æ—Å—Ç–∞. –ò—Ç–æ–≥ ‚Äî –¥–µ—Ä–∂–∏—Ç–µ —Å–µ—Ä–¥—Ü–µ –∏ —Ä–∞–∑—É–º –æ—Ç–∫—Ä—ã—Ç—ã–º–∏, —Ç–æ–≥–¥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–ª—å—à–µ, —á–µ–º –æ–∂–∏–¥–∞–µ—Ç–µ.",

    "üåå –ü–æ—Å–ª–∞–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞:\n–¢–µ–º–∞ *{theme}* —Å–≤—è–∑–∞–Ω–∞ —Å –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º: _{situation}_.\n\n"
    "–ö–∞—Ä—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–∞—É–∑—É, –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–∏—Ç—å –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–µ –∏ –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –ø—Ä–æ—Ü–µ—Å—Å—É. –í—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤–∞—Å."
]

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@dp.message_handler(commands=["start"])
async def cmd_start(m: types.Message):
    user_state[m.from_user.id] = {}
    await m.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –¢–∞—Ä–æ-–±–æ—Ç üé¥\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞:", reply_markup=menu_kb())

@dp.message_handler(commands=["menu"])
async def cmd_menu(m: types.Message):
    user_state[m.from_user.id] = {}
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞:", reply_markup=menu_kb())

@dp.message_handler(lambda m: m.text in ["‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è", "üíº –†–∞–±–æ—Ç–∞", "üí∞ –§–∏–Ω–∞–Ω—Å—ã"])
async def choose_theme(m: types.Message):
    user_state[m.from_user.id] = {"theme": m.text}
    await m.answer(
        "‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ú—ã —Å –°–µ—Ä–≥–µ–µ–º –ø–æ—Å—Å–æ—Ä–∏–ª–∏—Å—å –∏ —è —Ö–æ—á—É –ø–æ–Ω—è—Ç—å, –µ—Å—Ç—å –ª–∏ –±—É–¥—É—â–µ–µ' –∏–ª–∏ '–°—Ç–æ–∏—Ç –ª–∏ –º–µ–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É'."
    )

@dp.message_handler(lambda m: m.from_user.id in user_state and "theme" in user_state[m.from_user.id] and "situation" not in user_state[m.from_user.id])
async def save_situation(m: types.Message):
    user_state[m.from_user.id]["situation"] = m.text
    await m.answer("–°–ø–∞—Å–∏–±–æ üôè –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥:", reply_markup=spreads_kb())

@dp.message_handler(lambda m: m.text in ["üîÆ 3 –∫–∞—Ä—Ç—ã", "üåü 5 –∫–∞—Ä—Ç", "‚ú® –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç"])
async def do_spread(m: types.Message):
    user = user_state.get(m.from_user.id, {})
    theme = user.get("theme", "–û–±—â–µ–µ")
    situation = user.get("situation", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")

    num_cards = 3 if "3" in m.text else (5 if "5" in m.text else 10)
    drawn_cards = random.sample(TAROT_DECK, num_cards)

    interpretation = []
    for card in drawn_cards:
        if isinstance(card.get("meanings"), list):
            meaning = random.choice(card["meanings"])
        else:
            meaning = card.get("meaning", "–°–º—ã—Å–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        interpretation.append(f"üÉè {card['name']} ‚Äî {meaning}")

    summary_template = random.choice(SUMMARY_TEMPLATES)
    summary = summary_template.format(theme=theme, situation=situation)

    await m.answer(
        f"–í–∞—à —Ä–∞—Å–∫–ª–∞–¥ ({m.text}):\n\n" + "\n\n".join(interpretation) + "\n\n" + summary,
        parse_mode="Markdown",
        reply_markup=menu_kb()
    )

@dp.message_handler()
async def fallback(m: types.Message):
    await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —á–µ—Ä–µ–∑ /menu –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", reply_markup=menu_kb())

# === Aiohttp —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ–±—Ö—É–∫–∞ ===
async def webhook_handler(request):
    try:
        data = await request.json()
    except Exception:
        return web.Response(status=400)
    update = types.Update.to_object(data)
    await dp.process_update(update)
    return web.Response(text="ok")

async def on_startup(app):
    webhook_url = os.getenv("RENDER_EXTERNAL_URL") + WEBHOOK_PATH
    try:
        await bot.set_webhook(webhook_url)
        logger.info(f"Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")

async def on_shutdown(app):
    logger.info("–£–¥–∞–ª—è–µ–º webhook...")
    await bot.delete_webhook()

def main():
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, webhook_handler)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)

if __name__ == "__main__":
    main()
