import os
import json
import logging
import random
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.executor import set_webhook

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tarot-bot")

TOKEN = os.getenv("BOT_TOKEN")
RENDER_URL = os.getenv("RENDER_EXTERNAL_URL")  # https://tarot-bot-xxxx.onrender.com
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{RENDER_URL}{WEBHOOK_PATH}"

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# ------------------ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–æ–¥—ã ------------------
with open("data/deck.json", "r", encoding="utf-8") as f:
    TAROT_DECK = json.load(f)

# ------------------ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é ------------------
def menu_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üíñ –û—Ç–Ω–æ—à–µ–Ω–∏—è"), KeyboardButton("üíº –†–∞–±–æ—Ç–∞"))
    kb.add(KeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å—ã"), KeyboardButton("üåå –û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥"))
    return kb

# ------------------ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è ------------------
def interpret_card(card, position):
    """–î–ª–∏–Ω–Ω–æ–µ –∫—Ä–∞—Å–∏–≤–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã"""
    base = f"{card['name']}: {card['meaning_up'] if random.choice([True, False]) else card['meaning_rev']}."
    detail = (
        f"\nüåü –í –ø–æ–∑–∏—Ü–∏–∏ {position} —ç—Ç–∞ –∫–∞—Ä—Ç–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≥–ª—É–±–∏–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã. "
        f"–û–Ω–∞ —Å–ª–æ–≤–Ω–æ –∑–µ—Ä–∫–∞–ª–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é: {random.choice(['—Å–∫—Ä—ã—Ç—ã–µ –º–æ—Ç–∏–≤—ã', '–ø–æ–¥—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ö–∏', '–Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏'])}. "
        f"–í–∞–∂–Ω–æ –≤—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ ‚Äî –∑–¥–µ—Å—å –∑–∞–∫–ª—é—á—ë–Ω —É—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥—ë—Ç –∫ —Ä–æ—Å—Ç—É."
    )
    return base + detail

def summarize_spread(topic, cards):
    """–§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –∫–∞–∫ —É —Ç–∞—Ä–æ–ª–æ–≥–∞"""
    text = f"üîÆ –ò—Ç–æ–≥ —Ä–∞—Å–∫–ª–∞–¥–∞ –ø–æ —Ç–µ–º–µ: *{topic}*\n\n"
    insights = []
    for i, card in enumerate(cards, 1):
        insights.append(interpret_card(card, f'–ø–æ–∑–∏—Ü–∏–∏ {i}'))
    text += "\n\n".join(insights)
    text += (
        "\n\n‚ú® –û–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –ø–µ—Ä–µ–¥ –≤–∞–º–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –Ω–æ–≤—ã–µ –ø—É—Ç–∏. "
        "–°–æ–≤–µ—Ç –∫–∞—Ä—Ç ‚Äî –Ω–µ –±–æ—è—Ç—å—Å—è –ø–µ—Ä–µ–º–µ–Ω –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ —Å–ª—É—à–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–æ–ª–æ—Å. "
        "–°–µ–π—á–∞—Å –≤—Ä–µ–º—è –¥–ª—è –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã—Ö —à–∞–≥–æ–≤ –∏ –¥–æ–≤–µ—Ä–∏—è –∏–Ω—Ç—É–∏—Ü–∏–∏."
    )
    return text

# ------------------ –•–µ–Ω–¥–ª–µ—Ä—ã ------------------
@dp.message_handler(commands=["start"])
async def cmd_start(m: types.Message):
    await m.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –¢–∞—Ä–æ-–±–æ—Ç üÉè\n\n–í—ã–±–µ—Ä–∏ —Ç–µ–º—É —Ä–∞—Å–∫–ª–∞–¥–∞:", reply_markup=menu_kb())

@dp.message_handler(lambda m: m.text in ["üíñ –û—Ç–Ω–æ—à–µ–Ω–∏—è", "üíº –†–∞–±–æ—Ç–∞", "üí∞ –§–∏–Ω–∞–Ω—Å—ã", "üåå –û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥"])
async def ask_context(m: types.Message):
    topic = m.text.replace("üíñ ", "").replace("üíº ", "").replace("üí∞ ", "").replace("üåå ", "")
    await m.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É *{topic}*.\n\n–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî –∫–∞–∫ —É –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ —Ç–∞—Ä–æ–ª–æ–≥–∞ üôè")

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É –≤ data –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dp.current_state(user=m.from_user.id).update_data(topic=topic)

@dp.message_handler()
async def make_spread(m: types.Message):
    state = dp.current_state(user=m.from_user.id)
    data = await state.get_data()
    topic = data.get("topic")

    if not topic:
        await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É —Ä–∞—Å–∫–ª–∞–¥–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é:", reply_markup=menu_kb())
        return

    # –î–µ–ª–∞–µ–º —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ 3 –∫–∞—Ä—Ç—ã
    cards = random.sample(TAROT_DECK, 3)
    spread_text = summarize_spread(topic, cards)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    for card in cards:
        await m.answer_photo(card["img"], caption=card["name"])
    await m.answer(spread_text, parse_mode="Markdown")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–º—É, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ
    await state.reset_data()

# ------------------ Webhook ------------------
async def webhook_handler(request):
    try:
        data = await request.json()
        update = types.Update.to_object(data)
        if update:
            # üü¢ —Ñ–∏–∫—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            Bot.set_current(bot)
            Dispatcher.set_current(dp)
            await dp.process_update(update)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ø–¥–µ–π—Ç–∞: {e}")
    return web.Response()

async def on_startup(app):
    await bot.delete_webhook()
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

def main():
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, webhook_handler)
    app.on_startup.append(on_startup)
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 8080)))

if __name__ == "__main__":
    main()
