import os
import json
import random
import logging
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.executor import set_webhook

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tarot-bot")

# üîπ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")

WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{RENDER_EXTERNAL_URL}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 5000))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–æ–¥—É
with open("data/deck.json", "r", encoding="utf-8") as f:
    DECK = json.load(f)

# üîπ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é
def menu_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–û—Ç–Ω–æ—à–µ–Ω–∏—è üíû"))
    kb.add(KeyboardButton("–†–∞–±–æ—Ç–∞ ‚öíÔ∏è"))
    kb.add(KeyboardButton("–§–∏–Ω–∞–Ω—Å—ã üí∞"))
    kb.add(KeyboardButton("–û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥ üîÆ"))
    return kb

# üîπ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –∏ –∂–¥—ë–º –ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è)
user_state = {}

# üìå –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∫ —É —Ç–∞—Ä–æ–ª–æ–≥–∞
def generate_summary(theme, situation, cards):
    texts = []
    for c in cards:
        texts.append(f"‚Äî {c['name']}: {c['meaning']}")
    cards_text = "\n".join(texts)

    # –†–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –≤—ã–≤–æ–¥
    summary = (
        f"‚ú® –¢–µ–º–∞: {theme}\n"
        f"–í–∞—à –∑–∞–ø—Ä–æ—Å: {situation}\n\n"
        f"–ö–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–∞–ª–∏:\n{cards_text}\n\n"
        f"üîÆ –ò—Ç–æ–≥ —Ä–∞—Å–∫–ª–∞–¥–∞:\n"
        f"–í —Ä–∞—Å–∫–ª–∞–¥–µ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤–∞–∂–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç: –∫–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, "
        f"–∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∂–µ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ. –ó–¥–µ—Å—å –µ—Å—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∞ ‚Äî –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ "
        f"—Å–æ–±—ã—Ç–∏—è, –Ω–æ –∏ –Ω–∞ —Å–≤–æ—ë –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –Ω–∏–º. –°–æ–≤–µ—Ç —Ä–∞—Å–∫–ª–∞–¥–∞: —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —è—Å–Ω–æ—Å—Ç—å, –¥–æ–≤–µ—Ä—è—Ç—å "
        f"—Å–≤–æ–µ–º—É –æ–ø—ã—Ç—É –∏ –Ω–µ –±–æ—è—Ç—å—Å—è –ø–µ—Ä–µ–º–µ–Ω. –£ –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ "
        f"–Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å. –ì–ª–∞–≤–Ω–æ–µ ‚Äî —Å–ª—É—à–∞—Ç—å —Å–µ—Ä–¥—Ü–µ –∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ."
    )
    return summary

# üîπ –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def cmd_start(m: types.Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –¢–∞—Ä–æ-–±–æ—Ç üîÆ\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞:",
        reply_markup=menu_kb()
    )

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
@dp.message_handler(lambda m: m.text in ["–û—Ç–Ω–æ—à–µ–Ω–∏—è üíû", "–†–∞–±–æ—Ç–∞ ‚öíÔ∏è", "–§–∏–Ω–∞–Ω—Å—ã üí∞", "–û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥ üîÆ"])
async def on_theme(m: types.Message):
    user_state[m.from_user.id] = {"theme": m.text, "awaiting_situation": True}
    await m.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É: *{m.text}*\n\n"
        "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ò–≤–∞–Ω–æ–º¬ª, "
        "¬´—É—Å—Ç—Ä–æ–∏–ª—Å—è –≤ –Ω–æ–≤—É—é —Ñ–∏—Ä–º—É¬ª –∏–ª–∏ ¬´–±–µ—Å–ø–æ–∫–æ–∏—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –¥–æ—Ö–æ–¥–∞¬ª).",
        parse_mode="Markdown"
    )

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ —Ä–∞—Å–∫–ª–∞–¥
@dp.message_handler(lambda m: m.from_user.id in user_state and user_state[m.from_user.id].get("awaiting_situation"))
async def on_situation(m: types.Message):
    state = user_state[m.from_user.id]
    theme = state["theme"]
    situation = m.text

    # 3 —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç—ã
    cards = random.sample(DECK, 3)

    # –ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    summary = generate_summary(theme, situation, cards)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await m.answer(summary)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_state.pop(m.from_user.id, None)

# üîπ –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler()
async def on_free_text(m: types.Message):
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —á–µ—Ä–µ–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá", reply_markup=menu_kb())

# üîπ Aiohttp –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
async def on_startup(app):
    await bot.delete_webhook()
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(app):
    await bot.delete_webhook()
    await bot.close()

async def webhook_handler(request):
    data = await request.json()
    update = types.Update.to_object(data)
    await dp.process_update(update)
    return web.Response()

app = web.Application()
app.router.add_post(WEBHOOK_PATH, webhook_handler)
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

if __name__ == "__main__":
    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)
