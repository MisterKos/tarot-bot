import os
import json
import logging
import random
from typing import List

from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.markdown import hbold

# ---------------------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------------------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("tarot-bot")

# ---------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------------------
TOKEN = os.getenv("BOT_TOKEN") or "YOUR_TOKEN_HERE"
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: tarot-bot-12u6.onrender.com

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# ---------------------- –ö–∞—Ä—Ç—ã ----------------------
def load_deck() -> List[dict]:
    try:
        with open("data/deck.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–ª–æ–¥—É: {e}")
        return []

deck = load_deck()
log.info("–ö–æ–ª–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ –∏–∑ data/deck.json")

def draw_cards(n=3) -> List[dict]:
    return random.sample(deck, n)

def summarize_spread(cards: List[dict]) -> str:
    # –ò—Ç–æ–≥ —Ä–∞—Å–∫–ª–∞–¥–∞: –∂–∏–≤–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
    keywords = [c.get("meaning", "") for c in cards if c.get("meaning")]
    summary = " ".join(keywords[:5])  # —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    return f"‚ú® –ò—Ç–æ–≥ —Ä–∞—Å–∫–ª–∞–¥–∞: {summary if summary else '—Å–∏—Ç—É–∞—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞.'}"

# ---------------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------------------
def menu_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üîÆ –û—Ç–Ω–æ—à–µ–Ω–∏—è"),
           KeyboardButton("üíº –†–∞–±–æ—Ç–∞"),
           KeyboardButton("üí∞ –î–µ–Ω—å–≥–∏"))
    return kb

# ---------------------- –•–µ–Ω–¥–ª–µ—Ä—ã ----------------------
@dp.message_handler(commands=["start"])
async def cmd_start(m: types.Message):
    await m.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –Ω–∞ –¢–∞—Ä–æ üé¥", reply_markup=menu_kb())

@dp.message_handler(commands=["menu"])
async def cmd_menu(m: types.Message):
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥:", reply_markup=menu_kb())

@dp.message_handler(lambda m: m.text in ["üîÆ –û—Ç–Ω–æ—à–µ–Ω–∏—è", "üíº –†–∞–±–æ—Ç–∞", "üí∞ –î–µ–Ω—å–≥–∏"])
async def handle_spread(m: types.Message):
    cards = draw_cards(3)
    text = f"–í–∞—à —Ä–∞—Å–∫–ª–∞–¥ ({m.text}):\n\n"
    for c in cards:
        text += f"{hbold(c['name'])}: {c['meaning']}\n"
    text += "\n" + summarize_spread(cards)
    await m.answer(text)

@dp.message_handler()
async def on_free_text(m: types.Message):
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥ —á–µ—Ä–µ–∑ /menu.", reply_markup=menu_kb())

# ---------------------- Webhook ----------------------
async def webhook_handler(request: web.Request):
    try:
        data = await request.json()
    except Exception:
        return web.Response(status=400)
    update = types.Update.to_object(data)
    await dp.process_update(update)
    return web.Response(status=200, text="ok")

async def on_startup(app_: web.Application):
    if RENDER_EXTERNAL_URL:
        url = f"https://{RENDER_EXTERNAL_URL}/webhook"
        log.info("Webhook URL (–Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ setWebhook): %s", url)
    else:
        log.warning("RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω.")

def main():
    app = web.Application()
    app.router.add_post("/webhook", webhook_handler)
    app.on_startup.append(on_startup)
    port = int(os.getenv("PORT", 8080))
    web.run_app(app, host="0.0.0.0", port=port, print=None)

if __name__ == "__main__":
    main()
