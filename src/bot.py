# src/bot.py
# -*- coding: utf-8 -*-
import os
import json
import time
import logging
import random
from pathlib import Path
from typing import Dict, Any, List, Optional
import requests

from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_webhook
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

###############################################################################
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
###############################################################################
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("tarot-bot")

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# Render –¥–∞—ë—Ç –≤–Ω–µ—à–Ω–∏–π –∞–¥—Ä–µ—Å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL", "").rstrip("/")
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", "5000"))

WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{RENDER_EXTERNAL_URL}{WEBHOOK_PATH}" if RENDER_EXTERNAL_URL else ""

# –ü—É—Ç–∏/–∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–æ–ª–æ–¥—ã
LOCAL_DECK_PATH = Path("data/deck.json")
DECK_URL = os.getenv("DECK_URL", "").strip()

# –õ–∏–º–∏—Ç –Ω–∞ —á–∞—Å—Ç–æ—Ç—É —Ä–∞—Å–∫–ª–∞–¥–æ–≤ (—Å–µ–∫)
COOLDOWN_SECONDS = int(os.getenv("COOLDOWN_SECONDS", "360"))

# –ê–¥–º–∏–Ω—ã (–º–æ–≥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—É–ª–¥–∞—É–Ω)
ADMIN_IDS: set = set()
_admin_raw = os.getenv("ADMIN_IDS", "").strip()
if _admin_raw:
    for p in _admin_raw.split(","):
        p = p.strip()
        if p.isdigit():
            ADMIN_IDS.add(int(p))

###############################################################################
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞/–î–∏—Å–ø–µ—Ç—á–µ—Ä–∞/–ü–∞–º—è—Ç–∏
###############################################################################
bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

###############################################################################
# –°–æ—Å—Ç–æ—è–Ω–∏—è
###############################################################################
class SpreadStates(StatesGroup):
    kind = State()      # "one" | "three"
    topic = State()     # "relations" | "work" | "money" | "general"
    question = State()  # —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞

###############################################################################
# –î–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–¥—ã + —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
###############################################################################
DECK: Dict[str, Any] = {}
CARDS: List[Dict[str, Any]] = []   # —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫
IMAGE_BASE: str = ""               # base URL/–ø—É—Ç—å –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫
LAST_USED_AT: Dict[int, float] = {}  # user_id -> ts –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞

def _load_deck_local() -> Dict[str, Any]:
    if not LOCAL_DECK_PATH.exists():
        raise FileNotFoundError(str(LOCAL_DECK_PATH))
    with LOCAL_DECK_PATH.open("r", encoding="utf-8") as f:
        return json.load(f)

def _load_deck_remote(url: str) -> Dict[str, Any]:
    r = requests.get(url, timeout=15)
    r.raise_for_status()
    return r.json()

def _normalize_base_url(s: str) -> str:
    # –£–±–∏—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π / –µ—Å–ª–∏ –µ—Å—Ç—å
    return s[:-1] if s.endswith("/") else s

def _pick_cards(n: int, allow_reversed: bool = True, reversals_percent: int = 30) -> List[Dict[str, Any]]:
    if not CARDS:
        return []
    chosen = random.sample(CARDS, k=min(n, len(CARDS)))
    out = []
    for c in chosen:
        is_reversed = allow_reversed and (random.randint(1, 100) <= reversals_percent)
        out.append({
            "code": c.get("code"),
            "title_en": c.get("title_en"),
            "title_ru": c.get("title_ru"),
            "image": c.get("image"),
            "upright": c.get("upright") or "",
            "reversed": c.get("reversed") or "",
            "reversed_flag": is_reversed,
        })
    return out

def _cooldown_left(user_id: int) -> int:
    if user_id in ADMIN_IDS:
        return 0
    last = LAST_USED_AT.get(user_id, 0.0)
    delta = time.time() - last
    left = COOLDOWN_SECONDS - int(delta)
    return max(0, left)

def _set_used_now(user_id: int) -> None:
    LAST_USED_AT[user_id] = time.time()

def _cards_text_block(spread_kind: str, cards: List[Dict[str, Any]]) -> str:
    # –¢–µ–∫—Å—Ç–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ —Ä–∞—Å–∫–ª–∞–¥–∞ —Å –∫—Ä–∞—Ç–∫–∏–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏
    if spread_kind == "one":
        c = cards[0]
        dir_text = "–ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞" if c["reversed_flag"] else "–ø—Ä—è–º–∞—è"
        title = c.get("title_ru") or c.get("title_en") or c.get("code", "–∫–∞—Ä—Ç–∞")
        meaning = (c["reversed"] if c["reversed_flag"] else c["upright"]) or "–û–ø–∏—Å–∞–Ω–∏–µ —Å–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º."
        return f"üÉè <b>1 –∫–∞—Ä—Ç–∞</b>\n<b>{title}</b> ({dir_text})\n\n{meaning}"
    else:
        labels = ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ"]
        lines = [f"üîÆ <b>3 –∫–∞—Ä—Ç—ã</b>"]
        for label, c in zip(labels, cards):
            dir_text = "–ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞" if c["reversed_flag"] else "–ø—Ä—è–º–∞—è"
            title = c.get("title_ru") or c.get("title_en") or c.get("code", "–∫–∞—Ä—Ç–∞")
            meaning = (c["reversed"] if c["reversed_flag"] else c["upright"]) or "–û–ø–∏—Å–∞–Ω–∏–µ —Å–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º."
            lines.append(f"\n<b>{label}:</b> {title} ({dir_text})\n{meaning}")
        return "\n".join(lines)

def _card_image_url(card: Dict[str, Any]) -> Optional[str]:
    img = card.get("image")
    if not img or not IMAGE_BASE:
        return None
    return f"{IMAGE_BASE}/{img}"

###############################################################################
# UI –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
###############################################################################
def main_menu_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üÉè 1 –∫–∞—Ä—Ç–∞ ‚Äî —Å–æ–≤–µ—Ç"))
    kb.add(KeyboardButton("üîÆ 3 –∫–∞—Ä—Ç—ã ‚Äî –ø/–Ω/–±"))
    return kb

TOPIC_INLINE_KB = InlineKeyboardMarkup(row_width=2)
TOPIC_INLINE_KB.add(
    InlineKeyboardButton("‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="topic:relations"),
    InlineKeyboardButton("üíº –†–∞–±–æ—Ç–∞", callback_data="topic:work"),
    InlineKeyboardButton("üí∞ –î–µ–Ω—å–≥–∏", callback_data="topic:money"),
    InlineKeyboardButton("‚ú® –û–±—â–µ–µ", callback_data="topic:general"),
)

###############################################################################
# –•—ç–Ω–¥–ª–µ—Ä—ã
###############################################################################
@dp.message_handler(commands=["start"])
async def cmd_start(m: types.Message, state: FSMContext):
    await state.finish()
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –¥–µ–ª–∞—é –æ–Ω–ª–∞–π–Ω-—Ä–∞—Å–∫–ª–∞–¥—ã –Ω–∞ –¢–∞—Ä–æ –†–∞–π–¥–µ—Ä‚Äì–£—ç–π—Ç.\n"
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá\n\n"
        "–ü–æ–º–Ω–∏: —Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—à—å —Ç—ã —Å–∞–º(–∞). –ö–∞—Ä—Ç—ã ‚Äî —ç—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∏, –∞ –Ω–µ –ø—Ä–∏–≥–æ–≤–æ—Ä.",
        reply_markup=main_menu_kb(),
    )

@dp.message_handler(commands=["menu"])
async def cmd_menu(m: types.Message, state: FSMContext):
    await state.finish()
    await m.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞:", reply_markup=main_menu_kb())

@dp.message_handler(commands=["ping"])
async def cmd_ping(m: types.Message):
    await m.answer("pong")

@dp.message_handler(commands=["status"])
async def cmd_status(m: types.Message):
    await m.answer(
        "–°—Ç–∞—Ç—É—Å:\n"
        f"- –ö–æ–ª–æ–¥–∞: {DECK.get('name_ru') or DECK.get('name_en') or '–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'}\n"
        f"- –ö–∞—Ä—Ç: {len(CARDS)}\n"
        f"- –ë–∞–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {IMAGE_BASE or '‚Äî'}\n"
        f"- –ö—É–ª–¥–∞—É–Ω: {COOLDOWN_SECONDS} —Å–µ–∫\n"
        f"- –í–µ–±—Ö—É–∫: {'OK' if WEBHOOK_URL else '–Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω'}",
    )

@dp.message_handler(commands=["resetwebhook"])
async def cmd_resetwebhook(m: types.Message):
    if not WEBHOOK_URL:
        return await m.answer("RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω. –í–µ–±—Ö—É–∫ –Ω–µ–ª—å–∑—è –≤—ã—Å—Ç–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
    await bot.set_webhook(WEBHOOK_URL)
    await m.answer(f"–í–µ–±—Ö—É–∫ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:\n{WEBHOOK_URL}")

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é (—Ç–µ–∫—Å—Ç—ã)
@dp.message_handler(lambda msg: msg.text and msg.text.startswith("üÉè"))
async def choose_onecard(m: types.Message, state: FSMContext):
    left = _cooldown_left(m.from_user.id)
    if left > 0:
        return await m.answer(f"–ü–æ–¥–æ–∂–¥–∏ –µ—â—ë {left} —Å–µ–∫ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ä–∞—Å–∫–ª–∞–¥–æ–º üôè")

    await state.update_data(kind="one")
    await SpreadStates.topic.set()
    await m.answer("–ù–∞ –∫–∞–∫—É—é —Ç–µ–º—É –¥–µ–ª–∞–µ–º —Ä–∞—Å–∫–ª–∞–¥?", reply_markup=types.ReplyKeyboardRemove())
    await m.answer("–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:", reply_markup=TOPIC_INLINE_KB)

@dp.message_handler(lambda msg: msg.text and msg.text.startswith("üîÆ"))
async def choose_threecards(m: types.Message, state: FSMContext):
    left = _cooldown_left(m.from_user.id)
    if left > 0:
        return await m.answer(f"–ü–æ–¥–æ–∂–¥–∏ –µ—â—ë {left} —Å–µ–∫ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ä–∞—Å–∫–ª–∞–¥–æ–º üôè")

    await state.update_data(kind="three")
    await SpreadStates.topic.set()
    await m.answer("–ù–∞ –∫–∞–∫—É—é —Ç–µ–º—É –¥–µ–ª–∞–µ–º —Ä–∞—Å–∫–ª–∞–¥?", reply_markup=types.ReplyKeyboardRemove())
    await m.answer("–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:", reply_markup=TOPIC_INLINE_KB)

# –í—ã–±–æ—Ä —Ç–µ–º—ã (inline)
@dp.callback_query_handler(lambda c: c.data and c.data.startswith("topic:"), state=SpreadStates.topic)
async def topic_selected(cq: types.CallbackQuery, state: FSMContext):
    topic = cq.data.split(":", 1)[1]
    await state.update_data(topic=topic)
    await SpreadStates.question.set()
    await cq.message.edit_reply_markup()  # —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏
    await cq.message.answer("–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ –æ–¥–Ω–æ–º-–¥–≤—É—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.")
    await cq.answer()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞
@dp.message_handler(state=SpreadStates.question, content_types=types.ContentTypes.TEXT)
async def receive_question_and_spread(m: types.Message, state: FSMContext):
    data = await state.get_data()
    kind = data.get("kind", "one")
    topic = data.get("topic", "general")
    question = m.text.strip()

    # –ö—É–ª–¥–∞—É–Ω (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ç—è–Ω—É–ª)
    left = _cooldown_left(m.from_user.id)
    if left > 0:
        await state.finish()
        return await m.answer(f"–ü–æ–¥–æ–∂–¥–∏ –µ—â—ë {left} —Å–µ–∫ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ä–∞—Å–∫–ª–∞–¥–æ–º üôè", reply_markup=main_menu_kb())

    # –í—ã–±–æ—Ä –∫–∞—Ä—Ç
    reversals_percent = int(DECK.get("reversals_percent", 30))
    if kind == "one":
        cards = _pick_cards(1, allow_reversed=True, reversals_percent=reversals_percent)
    else:
        cards = _pick_cards(3, allow_reversed=True, reversals_percent=reversals_percent)

    if not cards:
        await state.finish()
        return await m.answer("–ö–æ–ª–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=main_menu_kb())

    # –¢–µ–∫—Å—Ç–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    summary = _cards_text_block(kind, cards)
    intro = (
        f"–¢–µ–º–∞: <b>{topic}</b>\n"
        f"–í–æ–ø—Ä–æ—Å: <i>{question}</i>\n\n"
    )
    await m.answer(intro + summary)

    # –ö–∞—Ä—Ç–∏–Ω–∫–∏ –∫–∞—Ä—Ç (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã URL)
    for c in cards:
        url = _card_image_url(c)
        if url:
            caption = (c.get("title_ru") or c.get("title_en") or c.get("code", "–ö–∞—Ä—Ç–∞"))
            if c["reversed_flag"]:
                caption += " (–ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞)"
            try:
                await m.answer_photo(url, caption=caption)
            except Exception as e:
                log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {url}: {e}")

    _set_used_now(m.from_user.id)
    await state.finish()
    await m.answer("–ì–æ—Ç–æ–≤–æ. –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥ ‚Äî –Ω–∞–∂–º–∏ /menu", reply_markup=main_menu_kb())

###############################################################################
# –í–µ–±—Ö—É–∫-—Ä–æ—É—Ç –∏ —Å—Ç–∞—Ä—Ç–∞–ø/—à—É—Ç–¥–∞—É–Ω
###############################################################################
async def on_startup(dp: Dispatcher):
    # 1) –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–æ–¥—ã
    global DECK, CARDS, IMAGE_BASE
    try:
        if LOCAL_DECK_PATH.exists():
            DECK = _load_deck_local()
            log.info("–ö–æ–ª–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ –∏–∑ data/deck.json")
        elif DECK_URL:
            DECK = _load_deck_remote(DECK_URL)
            log.info(f"–ö–æ–ª–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ URL: {DECK_URL}")
        else:
            DECK = {}
            log.error("–ö–æ–ª–æ–¥–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: –Ω–µ—Ç data/deck.json –∏ DECK_URL")
    except Exception as e:
        DECK = {}
        log.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–ª–æ–¥—É: {e}")

    CARDS = DECK.get("cards", []) if isinstance(DECK, dict) else []
    IMAGE_BASE = _normalize_base_url(DECK.get("image_base_url", "")) if isinstance(DECK, dict) else ""

    # 2) –í–µ–±—Ö—É–∫
    if not WEBHOOK_URL:
        log.warning("RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –≤–µ–±—Ö—É–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω.")
    else:
        await bot.set_webhook(WEBHOOK_URL)
        log.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(dp: Dispatcher):
    try:
        await bot.delete_webhook()
    except Exception:
        pass
    await dp.storage.close()
    await dp.storage.wait_closed()

###############################################################################
# –ó–∞–ø—É—Å–∫
###############################################################################
if __name__ == "__main__":
    # –í–µ–±—Ö—É–∫ —Å–µ—Ä–≤–µ—Ä –Ω–∞ Render: –¥–æ–ª–∂–µ–Ω —Å–ª—É—à–∞—Ç—å –ø–æ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π Render –∑–∞–¥–∞—ë—Ç –≤ $PORT
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
