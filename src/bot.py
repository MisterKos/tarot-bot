import os
import json
import random
import logging
from collections import defaultdict, deque

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

# ---------------- CONFIG ----------------
API_TOKEN = os.getenv("TELEGRAM_TOKEN") or "8162496264:AAEomZ-eUtqf_jESd6VZSpdHBYJsjPgds7o"

DATA_PATH = "data/deck.json"
HISTORY_PATH = "data/history.json"

# ---------------- LOGGING ----------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger("tarot-bot")

# ---------------- BOT INIT ----------------
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# ---------------- LOAD DECK ----------------
with open(DATA_PATH, "r", encoding="utf-8") as f:
    DECK = json.load(f)["cards"]

IMAGE_BASE_URL = "https://cdn.jsdelivr.net/gh/MisterKos/tarot-bot@main/assets/rw/cards/"

# ---------------- HISTORY ----------------
if os.path.exists(HISTORY_PATH):
    with open(HISTORY_PATH, "r", encoding="utf-8") as f:
        HISTORY = json.load(f)
else:
    HISTORY = defaultdict(list)

def save_history():
    with open(HISTORY_PATH, "w", encoding="utf-8") as f:
        json.dump(HISTORY, f, ensure_ascii=False, indent=2)

# ---------------- KEYBOARDS ----------------
menu_kb = ReplyKeyboardMarkup(resize_keyboard=True)
menu_kb.add("üîÆ –û—Ç–Ω–æ—à–µ–Ω–∏—è", "üíº –†–∞–±–æ—Ç–∞")
menu_kb.add("üí∞ –§–∏–Ω–∞–Ω—Å—ã", "üåå –û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥")

def spreads_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("1 –∫–∞—Ä—Ç–∞", "3 –∫–∞—Ä—Ç—ã", "–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç")
    return kb

# ---------------- HELPERS ----------------
def draw_cards(n=1):
    return random.sample(DECK, n)

def format_interpretation(card, position=None):
    direction = random.choice(["upright", "reversed"])
    title = f"{card['title_ru']} ({'–ü—Ä—è–º–æ–µ' if direction == 'upright' else '–ü–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–æ–µ'})"
    text = card[direction] if card[direction] != "‚Ä¶" else "–ó–¥–µ—Å—å –∏–¥—ë—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã."
    pos = f"–ü–æ–∑–∏—Ü–∏—è: {position}\n" if position else ""
    return f"‚ú® {title}\n{pos}{text}"

def final_summary(topic, situation, cards):
    summary = f"üîî –ò—Ç–æ–≥ –ø–æ —Ç–µ–º–µ ¬´{topic}¬ª:\n\n"
    summary += f"–°–∏—Ç—É–∞—Ü–∏—è: {situation}\n\n"
    summary += "–ö–∞—Ä—Ç—ã —Ä–∞—Å–∫—Ä—ã–≤–∞—é—Ç –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–≥–æ. "
    summary += "–û–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥ —Å–∫–∞–∑–∞–ª –±—ã, —á—Ç–æ —ç—Ç–∏ –æ–±—Ä–∞–∑—ã —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Å–∫—Ä—ã—Ç—ã–µ –ø—Ä–∏—á–∏–Ω—ã, –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å—Ö–æ–¥—ã –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã. "
    summary += "–í–∞–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ —Å–ª—É—á–∞–π–Ω—ã, –∞ —Å–∞–º–∏ –∫–∞—Ä—Ç—ã —Å–ª–æ–≤–Ω–æ –≤–µ–¥—É—Ç –≤–∞—Å –∫ –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–µ–Ω–∏—é.\n\n"
    summary += "üåü –°–æ–≤–µ—Ç: –ø—Ä–∏–º–∏—Ç–µ —ç—Ç–æ—Ç —Ä–∞—Å–∫–ª–∞–¥ –∫–∞–∫ –∑–µ—Ä–∫–∞–ª–æ, –ø–æ–∑–≤–æ–ª—è—é—â–µ–µ –∑–∞–≥–ª—è–Ω—É—Ç—å –≤–≥–ª—É–±—å —Å–µ–±—è. "
    summary += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è –º—É–¥—Ä—ã—Ö —Ä–µ—à–µ–Ω–∏–π."
    return summary

# ---------------- FSM ----------------
user_state = {}
user_topic = {}
user_situation = {}

# ---------------- HANDLERS ----------------
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    user_id = str(message.from_user.id)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üôå –Ø –¢–∞—Ä–æ-–±–æ—Ç.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞:",
        reply_markup=menu_kb
    )
    user_state[user_id] = "choose_topic"

@dp.message_handler(lambda m: m.text in ["üîÆ –û—Ç–Ω–æ—à–µ–Ω–∏—è", "üíº –†–∞–±–æ—Ç–∞", "üí∞ –§–∏–Ω–∞–Ω—Å—ã", "üåå –û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥"])
async def choose_topic(message: types.Message):
    user_id = str(message.from_user.id)
    topic = message.text
    user_topic[user_id] = topic
    user_state[user_id] = "describe_situation"
    await message.answer("–û–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ‚Ä¶")

@dp.message_handler(lambda m: user_state.get(str(m.from_user.id)) == "describe_situation")
async def describe_situation(message: types.Message):
    user_id = str(message.from_user.id)
    user_situation[user_id] = message.text
    user_state[user_id] = "choose_spread"
    await message.answer("–ö–∞–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥ —Å–¥–µ–ª–∞–µ–º?", reply_markup=spreads_kb())

@dp.message_handler(lambda m: m.text in ["1 –∫–∞—Ä—Ç–∞", "3 –∫–∞—Ä—Ç—ã", "–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç"])
async def choose_spread(message: types.Message):
    user_id = str(message.from_user.id)
    topic = user_topic.get(user_id, "–û–±—â–∏–π")
    situation = user_situation.get(user_id, "‚Äî")

    if message.text == "1 –∫–∞—Ä—Ç–∞":
        cards = draw_cards(1)
    elif message.text == "3 –∫–∞—Ä—Ç—ã":
        cards = draw_cards(3)
    else:
        cards = draw_cards(10)

    result = []
    for idx, card in enumerate(cards, start=1):
        interpretation = format_interpretation(card, position=idx)
        photo_url = IMAGE_BASE_URL + card["image"]
        await message.answer_photo(photo=photo_url, caption=interpretation)
        result.append(interpretation)

    summary = final_summary(topic, situation, cards)
    await message.answer(summary, reply_markup=menu_kb)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    HISTORY.setdefault(user_id, deque(maxlen=5))
    HISTORY[user_id].appendleft({
        "topic": topic,
        "situation": situation,
        "cards": [c["title_ru"] for c in cards],
        "summary": summary
    })
    save_history()

    user_state[user_id] = "choose_topic"

# ---------------- RUN ----------------
if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    executor.start_polling(dp, skip_updates=True)
