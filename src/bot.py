import json
import logging
import random
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiohttp import web

API_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("RENDER_EXTERNAL_URL")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8080))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tarot-bot")

# --- –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä ---
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–æ–¥—É ---
with open("data/deck.json", "r", encoding="utf-8") as f:
    DECK = json.load(f)

CARDS = DECK["cards"]
IMAGE_BASE = DECK["image_base_url"]

# --- –ü–∞–º—è—Ç—å –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤ ---
USER_STATE = {}
HISTORY_FILE = "data/history.json"

if os.path.exists(HISTORY_FILE):
    with open(HISTORY_FILE, "r", encoding="utf-8") as f:
        HISTORY = json.load(f)
else:
    HISTORY = {}

def save_history():
    with open(HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(HISTORY, f, ensure_ascii=False, indent=2)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üîÆ –û—Ç–Ω–æ—à–µ–Ω–∏—è", "üíº –†–∞–±–æ—Ç–∞")
    kb.add("üí∞ –§–∏–Ω–∞–Ω—Å—ã", "üåå –û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥")
    return kb

def spread_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("1 –∫–∞—Ä—Ç–∞", "3 –∫–∞—Ä—Ç—ã")
    kb.add("–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç")
    return kb

# --- –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞—Ä—Ç ---
def draw_cards(n=1):
    cards = random.sample(CARDS, n)
    result = []
    for card in cards:
        is_reversed = random.randint(1, 100) <= DECK["reversals_percent"]
        result.append({
            "title": card["title_ru"],
            "image": IMAGE_BASE + card["image"],
            "orientation": "–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è" if is_reversed else "–ü—Ä—è–º–∞—è",
            "meaning": card["reversed"] if is_reversed else card["upright"]
        })
    return result

# --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ---
def format_interpretation(theme, situation, spread_type, cards):
    text = f"‚ú® *–†–∞—Å–∫–ª–∞–¥ –ø–æ —Ç–µ–º–µ:* {theme}\n"
    text += f"üìù *–í–æ–ø—Ä–æ—Å:* {situation}\n"
    text += f"üîÆ *–¢–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞:* {spread_type}\n\n"
    for i, card in enumerate(cards, 1):
        text += f"**–ö–∞—Ä—Ç–∞ {i}: {card['title']} ({card['orientation']})**\n"
        text += f"–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ: {card['meaning']}\n\n"
    text += "üåü *–ò—Ç–æ–≥–æ–≤–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ:* üåü\n"
    text += (
        "–ö–∞—Ä—Ç—ã –ø–æ–∫–∞–∑–∞–ª–∏ –≥–ª—É–±–æ–∫—É—é –∫–∞—Ä—Ç–∏–Ω—É —Å–∏—Ç—É–∞—Ü–∏–∏. "
        "–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–Ω–µ—Å–∏—Ç–µ—Å—å –∫ –∏—Ö –ø–æ–¥—Å–∫–∞–∑–∫–∞–º: –æ–Ω–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç "
        "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞, –ø–µ—Ä–µ–º–µ–Ω –∏ –æ—Å–æ–∑–Ω–∞–Ω–∏—è. "
        "–î–æ–≤–µ—Ä—è–π—Ç–µ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ –ø–æ–º–Ω–∏—Ç–µ ‚Äî –≤—ã–±–æ—Ä –≤—Å–µ–≥–¥–∞ –∑–∞ –≤–∞–º–∏."
    )
    return text

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥ üßô‚Äç‚ôÇÔ∏è\n"
        "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É —Ä–∞—Å–∫–ª–∞–¥–∞:", reply_markup=main_menu()
    )

@dp.message_handler(lambda m: m.text in ["üîÆ –û—Ç–Ω–æ—à–µ–Ω–∏—è", "üíº –†–∞–±–æ—Ç–∞", "üí∞ –§–∏–Ω–∞–Ω—Å—ã", "üåå –û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥"])
async def choose_theme(message: types.Message):
    theme = message.text
    USER_STATE[message.from_user.id] = {"theme": theme}
    await message.answer(
        f"‚úèÔ∏è –û–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ.", reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message_handler(lambda m: m.from_user.id in USER_STATE and "theme" in USER_STATE[m.from_user.id] and "situation" not in USER_STATE[m.from_user.id])
async def choose_situation(message: types.Message):
    USER_STATE[message.from_user.id]["situation"] = message.text
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞:", reply_markup=spread_menu())

@dp.message_handler(lambda m: m.text in ["1 –∫–∞—Ä—Ç–∞", "3 –∫–∞—Ä—Ç—ã", "–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç"])
async def make_spread(message: types.Message):
    uid = str(message.from_user.id)
    theme = USER_STATE[message.from_user.id]["theme"]
    situation = USER_STATE[message.from_user.id]["situation"]
    spread_type = message.text

    n = 1 if spread_type == "1 –∫–∞—Ä—Ç–∞" else 3 if spread_type == "3 –∫–∞—Ä—Ç—ã" else 10
    cards = draw_cards(n)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    entry = {"theme": theme, "situation": situation, "spread": spread_type, "cards": cards}
    HISTORY.setdefault(uid, []).append(entry)
    HISTORY[uid] = HISTORY[uid][-5:]
    save_history()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã
    for i, card in enumerate(cards, 1):
        caption = f"–ö–∞—Ä—Ç–∞ {i}: {card['title']} ({card['orientation']})"
        await message.answer_photo(card["image"], caption=caption)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
    interpretation = format_interpretation(theme, situation, spread_type, cards)
    await message.answer(interpretation, parse_mode="Markdown")

# --- Webhook ---
async def webhook_handler(request):
    data = await request.json()
    update = types.Update.to_object(data)
    await dp.process_update(update)
    return web.Response()

def main():
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, webhook_handler)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)

if __name__ == "__main__":
    main()
