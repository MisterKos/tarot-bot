import os
import json
import logging
import random
import time
from collections import defaultdict, deque
from typing import Dict, Any, List, Optional

from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import set_webhook
from aiogram.types import (InlineKeyboardMarkup, InlineKeyboardButton,
                           ReplyKeyboardMarkup, KeyboardButton, ParseMode)

import requests

# -------------------- –±–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è --------------------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("tarot-bot")

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL", "").rstrip("/")
COOLDOWN_SECONDS = int(os.getenv("COOLDOWN_SECONDS", "300"))

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–æ–¥—ã: —Å–Ω–∞—á–∞–ª–∞ –ª–æ–∫–∞–ª—å–Ω–æ data/deck.json, –ø–æ—Ç–æ–º –ø–æ DECK_URL
DECK_URL = os.getenv("DECK_URL", "").strip()
DECK: Dict[str, Any] = {}
CARDS: List[Dict[str, Any]] = []
REVERSALS_PCT = 0
IMAGE_BASE_URL: Optional[str] = None

def _load_deck() -> None:
    global DECK, CARDS, REVERSALS_PCT, IMAGE_BASE_URL
    # 1) –ª–æ–∫–∞–ª—å–Ω–æ
    try:
        with open("data/deck.json", "r", encoding="utf-8") as f:
            DECK = json.load(f)
        CARDS = DECK.get("cards", [])
        REVERSALS_PCT = int(DECK.get("reversals_percent", 30))
        IMAGE_BASE_URL = DECK.get("image_base_url")
        log.info("–ö–æ–ª–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ –∏–∑ data/deck.json")
        return
    except Exception as e:
        log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ª–æ–¥—É: %r", e)

    # 2) –ø–æ URL (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
    if DECK_URL:
        try:
            r = requests.get(DECK_URL, timeout=15)
            r.raise_for_status()
            DECK = r.json()
            CARDS = DECK.get("cards", [])
            REVERSALS_PCT = int(DECK.get("reversals_percent", 30))
            IMAGE_BASE_URL = DECK.get("image_base_url")
            log.info("–ö–æ–ª–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ URL: %s", DECK_URL)
            return
        except Exception as e:
            log.error("–§–∞—Ç–∞–ª—å–Ω–æ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–ª–æ–¥—É –Ω–∏ –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–∏ –ø–æ URL: %s", e)

    # –ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –ø—É—Å—Ç–æ ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∫–æ–ª–æ–¥—ã (–Ω–æ —Å–æ–æ–±—â–∏–º –≤ /status)
    DECK = {}
    CARDS = []
    REVERSALS_PCT = 0
    IMAGE_BASE_URL = None
    log.error("–ö–æ–ª–æ–¥–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∏ –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–∏ –ø–æ URL ‚Äî —Ä–∞–±–æ—Ç–∞—é —Å –ø—É—Å—Ç–æ–π.")

_load_deck()

# -------------------- –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ --------------------
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot)

app = web.Application()

# –ö–æ—Ä–µ–Ω—å –∏ healthz ‚Äî —Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ 404/200 —á—Ç–æ–±—ã –Ω–µ –±—É–¥–∏—Ç—å –±–æ—Ç
async def handle_root(request):
    return web.Response(status=404, text="Not Found")

async def handle_health(request):
    return web.Response(status=200, text="OK")

app.router.add_get("/", handle_root)
app.router.add_get("/healthz", handle_health)
app.router.add_head("/", handle_root)

# Webhook endpoint (POST –æ—Ç Telegram)
async def webhook_handler(request):
    if request.match_info.get("token") != BOT_TOKEN:
        return web.Response(status=403, text="forbidden")
    try:
        data = await request.json()
    except Exception:
        data = {}
    update = types.Update.to_object(data)
    await dp.process_update(update)
    return web.Response(status=200, text="ok")

app.router.add_post(f"/webhook/{{token}}", webhook_handler)

# -------------------- –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è --------------------
# –ü—Ä–æ—Å—Ç–æ–µ FSM –Ω–∞ —Å–ª–æ–≤–∞—Ä—è—Ö (–±–µ–∑ aiogram FSM, —á—Ç–æ–±—ã –¥–µ—Ä–∂–∞—Ç—å –≤—Å—ë –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ)
WAIT_TOPIC: Dict[int, Dict[str, Any]] = {}      # user_id -> {"spread": "1"|"3"}
WAIT_QUESTION: Dict[int, Dict[str, Any]] = {}   # user_id -> {"spread": "...", "topic": "..."}

# –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤ per-user (–≤ –ø–∞–º—è—Ç–∏, –¥–æ 10)
HISTORY: Dict[int, deque] = defaultdict(lambda: deque(maxlen=10))

# –ö—É–ª–¥–∞—É–Ω
LAST_USED_AT: Dict[int, float] = {}

# -------------------- —É—Ç–∏–ª–∏—Ç—ã —Ä–∞—Å–∫–ª–∞–¥–æ–≤ --------------------
def pick_cards(n: int) -> List[Dict[str, Any]]:
    """–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞—Ä—Ç –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤ + —Ñ–ª–∞–≥ reversed –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –∏–∑ deck.json."""
    if not CARDS or len(CARDS) < n:
        return []
    sample = random.sample(CARDS, n)
    result = []
    for c in sample:
        is_reversed = random.randint(1, 100) <= max(0, min(100, REVERSALS_PCT))
        result.append({
            "code": c.get("code"),
            "title_en": c.get("title_en"),
            "title_ru": c.get("title_ru"),
            "image": c.get("image"),
            "upright": c.get("upright"),
            "reversed": c.get("reversed"),
            "reversed_flag": is_reversed,
        })
    return result

def card_title(c: Dict[str, Any]) -> str:
    t = c.get("title_ru") or c.get("title_en") or c.get("code") or "–ö–∞—Ä—Ç–∞"
    return f"{t}{' (–ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è)' if c.get('reversed_flag') else ''}"

def card_image_url(c: Dict[str, Any]) -> Optional[str]:
    img = c.get("image")
    if not img:
        return None
    if IMAGE_BASE_URL and isinstance(IMAGE_BASE_URL, str) and IMAGE_BASE_URL.startswith("http"):
        return IMAGE_BASE_URL.rstrip("/") + "/" + img
    # –µ—Å–ª–∏ image_base_url –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–µ –ø—Ä–∏–∫–ª–∞–¥—ã–≤–∞–µ–º
    return None

def spread_positions(spread: str) -> List[str]:
    if spread == "1":
        return ["–°–æ–≤–µ—Ç"]
    return ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ"]

def summarize_spread(cards: List[Dict[str, Any]], spread: str, topic: str, question: str) -> str:
    """–®–∞–±–ª–æ–Ω–Ω—ã–π ¬´–∏—Ç–æ–≥ —Ä–∞—Å–∫–ª–∞–¥–∞¬ª: –±–µ–∑ LLM, –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤."""
    if not cards:
        return "–ò—Ç–æ–≥: –∫–æ–ª–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Ä–∞—Å–∫–ª–∞–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω."

    majors = sum(1 for c in cards if (c.get("code") or "").startswith("major_"))
    reversed_cnt = sum(1 for c in cards if c.get("reversed_flag"))
    # –≥—Ä—É–±–∞—è –º–∞—Å—Ç—å –ø–æ –∫–æ–¥—É: cups / swords / wands / pentacles
    suits = {"cups":0, "swords":0, "wands":0, "pentacles":0, "other":0}
    for c in cards:
        code = (c.get("code") or "")
        found = False
        for s in ["cups", "swords", "wands", "pentacles"]:
            if s in code:
                suits[s] += 1
                found = True
                break
        if not found and not code.startswith("major_"):
            suits["other"] += 1

    suit_hint = max(suits, key=suits.get) if cards else "other"
    suit_text_map = {
        "cups": "—ç–º–æ—Ü–∏–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
        "swords": "–º—ã—Å–ª–∏, –≤—ã–±–æ—Ä –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ",
        "wands": "–¥–µ–π—Å—Ç–≤–∏—è, —ç–Ω–µ—Ä–≥–∏—è –∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã",
        "pentacles": "–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
        "other": "—Ä–∞–∑–Ω–æ—Ä–æ–¥–Ω—ã–µ –≤–ª–∏—è–Ω–∏—è",
    }
    suit_text = suit_text_map.get(suit_hint, "—Ä–∞–∑–Ω–æ—Ä–æ–¥–Ω—ã–µ –≤–ª–∏—è–Ω–∏—è")

    lines = []
    if spread == "1":
        lines.append("–ò—Ç–æ–≥: –∫–∞—Ä—Ç–∞-—Å–æ–≤–µ—Ç –∞–∫—Ü–µ–Ω—Ç–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤–æ–π —Ñ–æ–∫—É—Å: –ø—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ —Å–≤–æ–µ–º—É –æ—â—É—â–µ–Ω–∏—é ¬´–¥–∞/–Ω–µ—Ç¬ª, –Ω–æ —Ä–µ—à–µ–Ω–∏–µ ‚Äî –∑–∞ –≤–∞–º–∏.")
    else:
        lines.append("–ò—Ç–æ–≥ —Ä–∞—Å–∫–ª–∞–¥–∞:")
        if majors >= 2:
            lines.append("‚Ä¢ –ú–Ω–æ–≥–æ —Å—Ç–∞—Ä—à–∏—Ö –∞—Ä–∫–∞–Ω–æ–≤ ‚Äî –ø–µ—Ä–∏–æ–¥ –≤–∞–∂–Ω—ã—Ö –ø–æ–≤–æ—Ä–æ—Ç–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤, —Ä–µ—à–µ–Ω–∏—è –ø–æ–≤–ª–∏—è—é—Ç –Ω–∞–¥–æ–ª–≥–æ.")
        elif majors == 1:
            lines.append("‚Ä¢ –û–¥–∏–Ω —Å—Ç–∞—Ä—à–∏–π –∞—Ä–∫–∞–Ω ‚Äî –µ—Å—Ç—å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–µ–º–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Å—Ç–æ–∏—Ç —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
        if reversed_cnt >= 2:
            lines.append("‚Ä¢ –ú–Ω–æ–≥–æ –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç ‚Äî –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –±–ª–æ–∫–∏/—Å–æ–º–Ω–µ–Ω–∏—è —Å–∏–ª—å–Ω–µ–µ –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤; –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –ø—Ä–∏–≤—ã—á–Ω—ã—Ö —Ä–µ–∞–∫—Ü–∏–π.")
        lines.append(f"‚Ä¢ –ü—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∞—è —Ç–µ–º–∞: {suit_text}.")
        if topic.lower() != "–æ–±—â–µ–µ":
            lines.append(f"‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç: {topic}.")
        if question:
            lines.append(f"‚Ä¢ –í–æ–ø—Ä–æ—Å: {question}")

        lines.append("–ü–æ–º–Ω–∏—Ç–µ: –∫–∞—Ä—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏, –∞ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –≤—ã. –õ—é–±–æ–π –≤—ã–±–æ—Ä –Ω–µ—Å—ë—Ç –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.")

    return "\n".join(lines)

def format_spread_text(spread: str, cards: List[Dict[str, Any]]) -> str:
    pos = spread_positions(spread)
    chunks = []
    for i, c in enumerate(cards):
        title = card_title(c)
        meaning = (c.get("reversed") if c.get("reversed_flag") else c.get("upright")) or "‚Äî"
        chunks.append(f"<b>{pos[i]}:</b> {title}\n<i>{meaning}</i>")
    return "\n\n".join(chunks)

# -------------------- –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã --------------------
def menu_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üîÆ 1 –∫–∞—Ä—Ç–∞ ‚Äî —Å–æ–≤–µ—Ç"), KeyboardButton("üîÆ 3 –∫–∞—Ä—Ç—ã ‚Äî –ü/–ù/–ë"))
    kb.row(KeyboardButton("üßæ –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return kb

def topics_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.row(KeyboardButton("–û—Ç–Ω–æ—à–µ–Ω–∏—è"), KeyboardButton("–†–∞–±–æ—Ç–∞"))
    kb.row(KeyboardButton("–î–µ–Ω—å–≥–∏"), KeyboardButton("–û–±—â–µ–µ"))
    kb.row(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return kb

# -------------------- –∫—É–ª–¥–∞—É–Ω --------------------
def check_cooldown(user_id: int) -> Optional[int]:
    last = LAST_USED_AT.get(user_id)
    if not last:
        return None
    remain = COOLDOWN_SECONDS - int(time.time() - last)
    return remain if remain > 0 else None

def mark_used(user_id: int):
    LAST_USED_AT[user_id] = time.time()

# -------------------- —Ö–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ --------------------
@dp.message_handler(commands=["start"])
async def cmd_start(m: types.Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –æ–Ω–ª–∞–π–Ω-—Ä–∞—Å–∫–ª–∞–¥–æ–≤ –Ω–∞ –¢–∞—Ä–æ –†–∞–π–¥–µ—Ä‚Äì–£—ç–π—Ç.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥ —á–µ—Ä–µ–∑ /menu.\n\n"
        "<i>–î–∏—Å–∫–ª–µ–π–º–µ—Ä: —Ä–µ—à–µ–Ω–∏—è –≤ –∂–∏–∑–Ω–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –≤—ã. –ö–∞—Ä—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç –æ—Å–æ–∑–Ω–∞—Ç—å —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏.</i>",
        reply_markup=menu_kb()
    )

@dp.message_handler(commands=["help"])
async def cmd_help(m: types.Message):
    await m.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /menu ‚Äî –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤\n"
        "‚Ä¢ /history ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥—ã\n"
        "‚Ä¢ /status ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞\n"
        "‚Ä¢ /ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏\n\n"
        "–†–∞—Å–∫–ª–∞–¥—ã:\n"
        "‚Ä¢ 1 –∫–∞—Ä—Ç–∞ ‚Äî —Å–æ–≤–µ—Ç\n"
        "‚Ä¢ 3 –∫–∞—Ä—Ç—ã ‚Äî –ø—Ä–æ—à–ª–æ–µ/–Ω–∞—Å—Ç–æ—è—â–µ–µ/–±—É–¥—É—â–µ–µ\n\n"
        "<i>–ü–æ–º–Ω–∏—Ç–µ: –≤—ã–±–æ—Ä –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å ‚Äî –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ.</i>",
        reply_markup=menu_kb()
    )

@dp.message_handler(commands=["menu"])
async def cmd_menu(m: types.Message):
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥:", reply_markup=menu_kb())

@dp.message_handler(commands=["ping"])
async def cmd_ping(m: types.Message):
    await m.answer("pong")

@dp.message_handler(commands=["status"])
async def cmd_status(m: types.Message):
    info = [
        f"–ö–æ–ª–æ–¥–∞: {'–∑–∞–≥—Ä—É–∂–µ–Ω–∞' if CARDS else '–Ω–µ—Ç'}",
        f"–ö–∞—Ä—Ç: {len(CARDS)}",
        f"–ü–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã–µ: {REVERSALS_PCT}%",
        f"Cooldown: {COOLDOWN_SECONDS}s",
        f"Webhook: {RENDER_EXTERNAL_URL + '/webhook/‚Ä¶' if RENDER_EXTERNAL_URL else '–ª–æ–∫–∞–ª—å–Ω–æ/–Ω–µ –∑–∞–¥–∞–Ω'}",
    ]
    await m.answer("\n".join(info))

@dp.message_handler(commands=["history"])
async def cmd_history(m: types.Message):
    items = list(HISTORY[m.from_user.id])
    if not items:
        return await m.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥ —á–µ—Ä–µ–∑ /menu.")
    lines = ["<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥—ã:</b>"]
    for it in reversed(items):
        when = time.strftime("%Y-%m-%d %H:%M", time.localtime(it["ts"]))
        lines.append(f"‚Ä¢ {when} ‚Äî {('1 –∫–∞—Ä—Ç–∞' if it['spread']=='1' else '3 –∫–∞—Ä—Ç—ã')}: {it['topic']} ‚Äî ¬´{it['question'] or '–±–µ–∑ –≤–æ–ø—Ä–æ—Å–∞'}¬ª")
    await m.answer("\n".join(lines))

# -------------------- –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ) --------------------
@dp.message_handler(lambda m: m.text in {"üîÆ 1 –∫–∞—Ä—Ç–∞ ‚Äî —Å–æ–≤–µ—Ç", "üîÆ 3 –∫–∞—Ä—Ç—ã ‚Äî –ü/–ù/–ë"})
async def on_pick_spread(m: types.Message):
    if not CARDS:
        return await m.answer("–ö–æ–ª–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    remain = check_cooldown(m.from_user.id)
    if remain:
        return await m.answer(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {remain} —Å–µ–∫ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ä–∞—Å–∫–ª–∞–¥–æ–º üôè")

    spread = "1" if "1 –∫–∞—Ä—Ç–∞" in m.text else "3"
    WAIT_TOPIC[m.from_user.id] = {"spread": spread}
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞—Å–∫–ª–∞–¥–∞:", reply_markup=topics_kb())

@dp.message_handler(lambda m: m.text in {"–û—Ç–Ω–æ—à–µ–Ω–∏—è", "–†–∞–±–æ—Ç–∞", "–î–µ–Ω—å–≥–∏", "–û–±—â–µ–µ"})
async def on_pick_topic(m: types.Message):
    state = WAIT_TOPIC.pop(m.from_user.id, None)
    if not state:
        return await m.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥ —á–µ—Ä–µ–∑ /menu.")
    WAIT_QUESTION[m.from_user.id] = {"spread": state["spread"], "topic": m.text}
    await m.answer("–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º).", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")))

@dp.message_handler(lambda m: m.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def on_cancel(m: types.Message):
    WAIT_TOPIC.pop(m.from_user.id, None)
    WAIT_QUESTION.pop(m.from_user.id, None)
    await m.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_kb())

# -------------------- –ø—Ä–∏–Ω—è—Ç–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞ --------------------
@dp.message_handler()
async def on_free_text(m: types.Message):
    # –µ—Å–ª–∏ –∂–¥—ë–º –≤–æ–ø—Ä–æ—Å
    qstate = WAIT_QUESTION.pop(m.from_user.id, None)
    if qstate:
        spread = qstate["spread"]
        topic = qstate["topic"]
        question = m.text.strip()

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        remain = check_cooldown(m.from_user.id)
        if remain:
            WAIT_QUESTION[m.from_user.id] = qstate  # –≤–µ—Ä–Ω—É—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å
            return await m.answer(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {remain} —Å–µ–∫ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Ä–∞—Å–∫–ª–∞–¥–æ–º üôè")

        # —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥
        n = 1 if spread == "1" else 3
        cards = pick_cards(n)
        if not cards:
            return await m.answer("–ö–æ–ª–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=menu_kb())

        # —Ç–µ–∫—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å
        body = format_spread_text(spread, cards)
        summary = summarize_spread(cards, spread, topic, question)

        # –æ—Ç–ø—Ä–∞–≤–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å http-–∫–∞—Ä—Ç–∏–Ω–∫–∏ ‚Äî –ø—Ä–∏–ª–æ–∂–∏–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–æ–π
        media_urls = [card_image_url(c) for c in cards]
        media_urls = [u for u in media_urls if u]

        if media_urls:
            media = [types.InputMediaPhoto(media=media_urls[0], caption=f"<b>–í–∞—à —Ä–∞—Å–∫–ª–∞–¥</b>\n\n{body}", parse_mode=ParseMode.HTML)]
            for u in media_urls[1:]:
                media.append(types.InputMediaPhoto(media=u))
            try:
                await m.answer_media_group(media)
            except Exception as e:
                log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å media group: %r ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–∫—Å—Ç–æ–º", e)
                await m.answer(f"<b>–í–∞—à —Ä–∞—Å–∫–ª–∞–¥</b>\n\n{body}")
        else:
            await m.answer(f"<b>–í–∞—à —Ä–∞—Å–∫–ª–∞–¥</b>\n\n{body}")

        await m.answer(summary, reply_markup=menu_kb())

        # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
        HISTORY[m.from_user.id].append({
            "ts": time.time(),
            "spread": spread,
            "topic": topic,
            "question": question,
            "cards": [{"code": c["code"], "reversed": bool(c["reversed_flag"])} for c in cards],
        })
        # –æ—Ç–º–µ—Ç–∏—Ç—å –∫—É–ª–¥–∞—É–Ω
        mark_used(m.from_user.id)
        return

    # –µ—Å–ª–∏ –Ω–µ –∂–¥—ë–º –≤–æ–ø—Ä–æ—Å –∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ ‚Äî –ø–æ–∫–∞–∂–µ–º –º–µ–Ω—é
    if m.text.startswith("/"):
        return  # –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã –≤—ã—à–µ
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥ —á–µ—Ä–µ–∑ /menu.", reply_markup=menu_kb())

# -------------------- –∑–∞–ø—É—Å–∫ webhook-—Å–µ—Ä–≤–µ—Ä–∞ --------------------
async def on_startup(app_: web.Application):
    if not RENDER_EXTERNAL_URL:
        log.warning("RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî webhook –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return
    url = f"{RENDER_EXTERNAL_URL}/webhook/{BOT_TOKEN}"
    ok = await set_webhook(bot, url)
    if ok:
        log.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", url)
    else:
        log.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: %s", url)

def main():
    # Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ—Ä—Ç, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10000
    port = int(os.getenv("PORT", "10000"))
    web.run_app(app, host="0.0.0.0", port=port, print=None)

if __name__ == "__main__":
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ö—É–∫–∏ —Å—Ç–∞—Ä—Ç–∞
    app.on_startup.append(on_startup)
    main()
