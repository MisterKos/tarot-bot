import os
import json
import logging
import random
from datetime import datetime
from pathlib import Path

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.executor import start_webhook
from aiohttp import web

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")
logger = logging.getLogger("tarot-bot")

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("RENDER_EXTERNAL_URL")  # https://tarot-bot-xxx.onrender.com
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 5000))

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# --- –ü—É—Ç–∏ ---
DATA_PATH = Path("data/deck.json")
HISTORY_PATH = Path("data/history.json")
CARDS_PATH = Path("assets/rw/cards/")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–æ–¥—ã ---
if DATA_PATH.exists():
    with open(DATA_PATH, "r", encoding="utf-8") as f:
        DECK = json.load(f)
    logger.info("–ö–æ–ª–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ –∏–∑ data/deck.json")
else:
    DECK = {}
    logger.error("deck.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ ---
if not HISTORY_PATH.exists():
    with open(HISTORY_PATH, "w", encoding="utf-8") as f:
        json.dump({}, f)


def save_history(user_id: int, spread: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–∫–ª–∞–¥ –≤ –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)."""
    with open(HISTORY_PATH, "r", encoding="utf-8") as f:
        history = json.load(f)

    user_id = str(user_id)
    if user_id not in history:
        history[user_id] = []
    history[user_id].append(spread)
    history[user_id] = history[user_id][-5:]  # –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5

    with open(HISTORY_PATH, "w", encoding="utf-8") as f:
        json.dump(history, f, ensure_ascii=False, indent=2)


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üîÆ –û—Ç–Ω–æ—à–µ–Ω–∏—è"), KeyboardButton("üíº –†–∞–±–æ—Ç–∞"))
    kb.add(KeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å—ã"), KeyboardButton("üåå –û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥"))
    kb.add(KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤"))
    return kb


def spread_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("1 –∫–∞—Ä—Ç–∞"))
    kb.add(KeyboardButton("3 –∫–∞—Ä—Ç—ã"))
    kb.add(KeyboardButton("–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç"))
    kb.add(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
    return kb


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ---
def draw_cards(n: int):
    return random.sample(DECK, n)


def card_image(card_name: str):
    file_path = CARDS_PATH / f"{card_name}.jpg"
    if file_path.exists():
        return file_path
    return None


def generate_interpretation(cards, situation: str, theme: str):
    """–°–æ–∑–¥–∞—ë—Ç –∫—Ä–∞—Å–∏–≤—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤ —Å—Ç–∏–ª–µ –æ–ø—ã—Ç–Ω–æ–≥–æ —Ç–∞—Ä–æ–ª–æ–≥–∞."""
    intro = f"‚ú® –¢–µ–º–∞: *{theme}*\nüìñ –í–æ–ø—Ä–æ—Å: _{situation}_\n"
    body = ""
    for i, card in enumerate(cards, 1):
        body += f"\n**{i}. {card['name']}** ‚Äî {card['meaning']}\n"

    # ¬´—Å–æ—á–Ω—ã–π¬ª –∏—Ç–æ–≥
    summary = (
        "\nüåå –ò—Ç–æ–≥ —Ä–∞—Å–∫–ª–∞–¥–∞\n"
        "–ö–∞—Ä—Ç—ã –æ–±—Ä–∞–∑—É—é—Ç –µ–¥–∏–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é. –°–µ–π—á–∞—Å –≤—ã —Å—Ç–æ–∏—Ç–µ –Ω–∞ –ø–æ—Ä–æ–≥–µ –ø–µ—Ä–µ–º–µ–Ω, "
        "–∏ –∫–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç —Å–≤–æ–π –∞—Å–ø–µ–∫—Ç. "
        "–°—É–¥—å–±–∞ —Å–ª–æ–≤–Ω–æ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –∫ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Å —Å–æ–±–æ–π: "
        "—Å–º–µ–ª–æ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è, –æ–ø–∏—Ä–∞–π—Ç–µ—Å—å –Ω–∞ –∏–Ω—Ç—É–∏—Ü–∏—é, "
        "–Ω–µ –∑–∞–±—ã–≤–∞—è –æ–± –æ–ø—ã—Ç–µ –ø—Ä–æ—à–ª–æ–≥–æ. –í–∞–∂–Ω–æ –≤–∏–¥–µ—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, "
        "–Ω–æ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è.\n\n"
        "–≠—Ç–æ—Ç —Ä–∞—Å–∫–ª–∞–¥ —Å–ª–æ–≤–Ω–æ —Å–æ–≤–µ—Ç –æ–ø—ã—Ç–Ω–æ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: "
        "–±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–Ω–∞–∫–∞–º, –Ω–µ —Å–ø–µ—à–∏—Ç–µ ‚Äî –∏ –¥–æ—Ä–æ–≥–∞ –≤—ã–≤–µ–¥–µ—Ç —Ç—É–¥–∞, –≥–¥–µ –≤—ã –Ω–∞–π–¥—ë—Ç–µ –≥–∞—Ä–º–æ–Ω–∏—é."
    )

    return intro + body + summary


# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –¢–∞—Ä–æ-–±–æ—Ç üÉè\n"
        "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É —Ä–∞—Å–∫–ª–∞–¥–∞:", reply_markup=main_menu()
    )


@dp.message_handler(lambda m: m.text in ["üîÆ –û—Ç–Ω–æ—à–µ–Ω–∏—è", "üíº –†–∞–±–æ—Ç–∞", "üí∞ –§–∏–Ω–∞–Ω—Å—ã", "üåå –û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥"])
async def ask_situation(message: types.Message):
    dp.current_state(user=message.from_user.id).update_data(theme=message.text)
    await message.answer("–û–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ:", reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(lambda m: m.text and m.text not in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üìú –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤"])
async def choose_spread(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    data = await state.get_data()
    if "theme" in data and "situation" not in data:
        await state.update_data(situation=message.text)
        await message.answer("–í—ã–±–µ—Ä–∏ —Ä–∞—Å–∫–ª–∞–¥:", reply_markup=spread_menu())
    elif "situation" in data:
        await message.answer("–í—ã–±–µ—Ä–∏ —Ä–∞—Å–∫–ª–∞–¥:", reply_markup=spread_menu())


@dp.message_handler(lambda m: m.text in ["1 –∫–∞—Ä—Ç–∞", "3 –∫–∞—Ä—Ç—ã", "–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç"])
async def do_spread(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    data = await state.get_data()
    theme = data.get("theme", "–û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥")
    situation = data.get("situation", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")

    if message.text == "1 –∫–∞—Ä—Ç–∞":
        cards = draw_cards(1)
    elif message.text == "3 –∫–∞—Ä—Ç—ã":
        cards = draw_cards(3)
    else:
        cards = draw_cards(10)

    spread = {
        "date": datetime.now().strftime("%Y-%m-%d %H:%M"),
        "theme": theme,
        "situation": situation,
        "cards": [c["name"] for c in cards],
    }
    save_history(message.from_user.id, spread)

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç
    for card in cards:
        img = card_image(card["name"])
        if img:
            with open(img, "rb") as f:
                await message.answer_photo(f, caption=f"**{card['name']}**\n{card['meaning']}", parse_mode="Markdown")
        else:
            await message.answer(f"**{card['name']}**\n{card['meaning']}", parse_mode="Markdown")

    # –æ–±—â–∏–π –∏—Ç–æ–≥
    text = generate_interpretation(cards, situation, theme)
    await message.answer(text, parse_mode="Markdown", reply_markup=main_menu())
    await state.finish()


@dp.message_handler(lambda m: m.text == "üìú –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤")
async def show_history(message: types.Message):
    with open(HISTORY_PATH, "r", encoding="utf-8") as f:
        history = json.load(f)
    user_history = history.get(str(message.from_user.id), [])
    if not user_history:
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", reply_markup=main_menu())
        return

    text = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥—ã:\n"
    for spread in user_history[-5:]:
        text += f"\nüìÖ {spread['date']} ‚Äî {spread['theme']}\n–í–æ–ø—Ä–æ—Å: {spread['situation']}\n–ö–∞—Ä—Ç—ã: {', '.join(spread['cards'])}\n"
    await message.answer(text, reply_markup=main_menu())


# --- Webhook ---
async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")


async def on_shutdown(dp):
    await bot.delete_webhook()
    logger.info("Webhook —É–¥–∞–ª—ë–Ω")


def main():
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        skip_updates=True,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )


if __name__ == "__main__":
    main()
