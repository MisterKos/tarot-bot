import os
import json
import random
import logging
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tarot-bot")

# üîπ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")

WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{RENDER_EXTERNAL_URL}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 5000))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–æ–¥—É
with open("data/deck.json", "r", encoding="utf-8") as f:
    DECK = json.load(f)

# üîπ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é
def menu_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–û—Ç–Ω–æ—à–µ–Ω–∏—è üíû"))
    kb.add(KeyboardButton("–†–∞–±–æ—Ç–∞ ‚öíÔ∏è"))
    kb.add(KeyboardButton("–§–∏–Ω–∞–Ω—Å—ã üí∞"))
    kb.add(KeyboardButton("–û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥ üîÆ"))
    return kb

# üîπ –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}

# üìå –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∫ —É —Ç–∞—Ä–æ–ª–æ–≥–∞
def generate_summary(theme, situation, cards):
    cards_text = "\n".join([f"‚Äî {c['name']}: {c['meaning']}" for c in cards])

    endings = [
        (
            "–≠—Ç–æ—Ç —Ä–∞—Å–∫–ª–∞–¥ —Å–ª–æ–≤–Ω–æ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç —Å–∫—Ä—ã—Ç—ã–µ –ø—Ä—É–∂–∏–Ω—ã –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏. "
            "–ö–∞—Ä—Ç—ã –Ω–∞–º–µ–∫–∞—é—Ç, —á—Ç–æ –∫–ª—é—á –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –ª–µ–∂–∏—Ç –≤–Ω—É—Ç—Ä–∏ –≤–∞—Å. "
            "–°–æ–≤–µ—Ç: –ø—Ä–∏–º–∏—Ç–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–µ –∫–∞–∫ —ç—Ç–∞–ø –ø—É—Ç–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤–∞–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ."
        ),
        (
            "–ö–∞—Ä—Ç—ã —Å–ª–æ–≤–Ω–æ –ø–æ–¥—Ç–∞–ª–∫–∏–≤–∞—é—Ç –∫ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–µ –ø—Ä–∏–≤—ã—á–Ω–æ–≥–æ. "
            "–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã, –Ω–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—É—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–∞—Ö–∏. "
            "–°–æ–≤–µ—Ç: –¥–æ–≤–µ—Ä—è–π—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—É –∏ –¥–µ–ª–∞–π—Ç–µ —à–∞–≥–∏ –≤–ø–µ—Ä—ë–¥, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–æ—Ä–æ–≥–∞ –µ—â—ë –Ω–µ—è—Å–Ω–∞."
        ),
        (
            "–í—ã–ø–∞–≤—à–∏–µ –∫–∞—Ä—Ç—ã —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –≤–∞–∂–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –≤ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏. "
            "–î–∞–∂–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –≤—ã—Å—Ç—É–ø–∞—é—Ç –∫–∞–∫ —Ç—Ä–∞–º–ø–ª–∏–Ω –¥–ª—è —Ä–æ—Å—Ç–∞. "
            "–°–æ–≤–µ—Ç: –∏—â–∏—Ç–µ –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ä–∞–∑—É–º–æ–º –∏ —á—É–≤—Å—Ç–≤–∞–º–∏, –∏ —Ç–æ–≥–¥–∞ —Å–∏—Ç—É–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–∏—Ç—Å—è –Ω–∞–∏–ª—É—á—à–∏–º –æ–±—Ä–∞–∑–æ–º."
        ),
    ]
    final_text = random.choice(endings)

    return (
        f"‚ú® –¢–µ–º–∞: {theme}\n"
        f"–í–∞—à –∑–∞–ø—Ä–æ—Å: {situation}\n\n"
        f"–ö–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–∞–ª–∏:\n{cards_text}\n\n"
        f"üîÆ –ò—Ç–æ–≥ —Ä–∞—Å–∫–ª–∞–¥–∞:\n{final_text}"
    )

# üîπ –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def cmd_start(m: types.Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –¢–∞—Ä–æ-–±–æ—Ç üîÆ\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞:",
        reply_markup=menu_kb()
    )

# üîπ –í—ã–±–æ—Ä —Ç–µ–º—ã
@dp.message_handler(lambda m: m.text in ["–û—Ç–Ω–æ—à–µ–Ω–∏—è üíû", "–†–∞–±–æ—Ç–∞ ‚öíÔ∏è", "–§–∏–Ω–∞–Ω—Å—ã üí∞", "–û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥ üîÆ"])
async def on_theme(m: types.Message):
    user_state[m.from_user.id] = {"theme": m.text, "awaiting_situation": True}
    await m.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É: *{m.text}*\n\n"
        "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ò–≤–∞–Ω–æ–º¬ª, "
        "¬´—É—Å—Ç—Ä–æ–∏–ª—Å—è –≤ –Ω–æ–≤—É—é —Ñ–∏—Ä–º—É¬ª –∏–ª–∏ ¬´–±–µ—Å–ø–æ–∫–æ–∏—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –¥–æ—Ö–æ–¥–∞¬ª).",
        parse_mode="Markdown"
    )

# üîπ –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ + —Ä–∞—Å–∫–ª–∞–¥
@dp.message_handler(lambda m: m.from_user.id in user_state and user_state[m.from_user.id].get("awaiting_situation"))
async def on_situation(m: types.Message):
    state = user_state[m.from_user.id]
    theme = state["theme"]
    situation = m.text

    cards = random.sample(DECK, 3)
    summary = generate_summary(theme, situation, cards)

    await m.answer(summary)
    user_state.pop(m.from_user.id, None)

# üîπ –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç
@dp.message_handler()
async def on_free_text(m: types.Message):
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —á–µ—Ä–µ–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá", reply_markup=menu_kb())

# üîπ –í–µ–±-—Å–µ—Ä–≤–µ—Ä aiohttp
async def on_startup(app):
    await bot.delete_webhook()
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(app):
    await bot.delete_webhook()
    await bot.close()

async def webhook_handler(request):
    try:
        data = await request.json()
        update = types.Update.to_object(data)
        if update:
            await dp.process_update(update)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ø–¥–µ–π—Ç–∞: {e}")
    return web.Response()

app = web.Application()
app.router.add_post(WEBHOOK_PATH, webhook_handler)
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

if __name__ == "__main__":
    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)
