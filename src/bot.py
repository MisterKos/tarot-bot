import os
import json
import logging
import random
import time
from collections import defaultdict, deque
from typing import Dict, Any, List, Optional

from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ParseMode

import requests

# -------------------- –±–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è --------------------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("tarot-bot")

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL", "").rstrip("/")
COOLDOWN_SECONDS = int(os.getenv("COOLDOWN_SECONDS", "300"))

DECK_URL = os.getenv("DECK_URL", "").strip()
DECK: Dict[str, Any] = {}
CARDS: List[Dict[str, Any]] = []
REVERSALS_PCT = 0
IMAGE_BASE_URL: Optional[str] = None

def _load_deck() -> None:
    global DECK, CARDS, REVERSALS_PCT, IMAGE_BASE_URL
    try:
        with open("data/deck.json", "r", encoding="utf-8") as f:
            DECK = json.load(f)
        CARDS = DECK.get("cards", [])
        REVERSALS_PCT = int(DECK.get("reversals_percent", 30))
        IMAGE_BASE_URL = DECK.get("image_base_url")
        log.info("–ö–æ–ª–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ –∏–∑ data/deck.json")
        return
    except Exception as e:
        log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ª–æ–¥—É: %r", e)

    if DECK_URL:
        try:
            r = requests.get(DECK_URL, timeout=15)
            r.raise_for_status()
            DECK = r.json()
            CARDS = DECK.get("cards", [])
            REVERSALS_PCT = int(DECK.get("reversals_percent", 30))
            IMAGE_BASE_URL = DECK.get("image_base_url")
            log.info("–ö–æ–ª–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ URL: %s", DECK_URL)
            return
        except Exception as e:
            log.error("–§–∞—Ç–∞–ª—å–Ω–æ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–ª–æ–¥—É –Ω–∏ –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–∏ –ø–æ URL: %s", e)

    DECK = {}
    CARDS = []
    REVERSALS_PCT = 0
    IMAGE_BASE_URL = None
    log.error("–ö–æ–ª–æ–¥–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∏ –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–∏ –ø–æ URL ‚Äî —Ä–∞–±–æ—Ç–∞—é —Å –ø—É—Å—Ç–æ–π.")

_load_deck()

# -------------------- –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è --------------------
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot)
app = web.Application()

# -------------------- —Ä—É—á–∫–∏ --------------------
async def handle_root(request):
    return web.Response(status=404, text="Not Found")

async def handle_health(request):
    return web.Response(status=200, text="OK")

async def webhook_handler(request):
    try:
        data = await request.json()
    except Exception:
        data = {}
    update = types.Update.to_object(data)
    await dp.process_update(update)
    return web.Response(status=200, text="ok")

app.router.add_get("/", handle_root)
app.router.add_get("/healthz", handle_health)
app.router.add_post("/webhook", webhook_handler)

# -------------------- —Å–æ—Å—Ç–æ—è–Ω–∏—è --------------------
WAIT_TOPIC: Dict[int, Dict[str, Any]] = {}
WAIT_QUESTION: Dict[int, Dict[str, Any]] = {}
HISTORY: Dict[int, deque] = defaultdict(lambda: deque(maxlen=10))
LAST_USED_AT: Dict[int, float] = {}

# -------------------- —É—Ç–∏–ª–∏—Ç—ã --------------------
def pick_cards(n: int) -> List[Dict[str, Any]]:
    if not CARDS or len(CARDS) < n:
        return []
    sample = random.sample(CARDS, n)
    result = []
    for c in sample:
        is_reversed = random.randint(1, 100) <= max(0, min(100, REVERSALS_PCT))
        result.append({
            "code": c.get("code"),
            "title_en": c.get("title_en"),
            "title_ru": c.get("title_ru"),
            "image": c.get("image"),
            "upright": c.get("upright"),
            "reversed": c.get("reversed"),
            "reversed_flag": is_reversed,
        })
    return result

def card_title(c: Dict[str, Any]) -> str:
    t = c.get("title_ru") or c.get("title_en") or c.get("code") or "–ö–∞—Ä—Ç–∞"
    return f"{t}{' (–ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è)' if c.get('reversed_flag') else ''}"

def card_image_url(c: Dict[str, Any]) -> Optional[str]:
    img = c.get("image")
    if not img:
        return None
    if IMAGE_BASE_URL and IMAGE_BASE_URL.startswith("http"):
        return IMAGE_BASE_URL.rstrip("/") + "/" + img
    return None

def spread_positions(spread: str) -> List[str]:
    return ["–°–æ–≤–µ—Ç"] if spread == "1" else ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ"]

def summarize_spread(cards: List[Dict[str, Any]], spread: str, topic: str, question: str) -> str:
    if not cards:
        return "–ò—Ç–æ–≥: –∫–æ–ª–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

    majors = sum(1 for c in cards if (c.get("code") or "").startswith("major_"))
    reversed_cnt = sum(1 for c in cards if c.get("reversed_flag"))
    suits = {"cups":0, "swords":0, "wands":0, "pentacles":0}
    for c in cards:
        code = (c.get("code") or "")
        for s in suits.keys():
            if s in code:
                suits[s] += 1
                break
    main_suit = max(suits, key=suits.get)
    suit_text_map = {
        "cups": "—ç–º–æ—Ü–∏–∏, —á—É–≤—Å—Ç–≤–∞ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
        "swords": "–º—ã—Å–ª–∏, –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏ –≤—ã–±–æ—Ä",
        "wands": "—ç–Ω–µ—Ä–≥–∏—è, –¥–µ–π—Å—Ç–≤–∏—è –∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞",
        "pentacles": "–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
    }
    suit_text = suit_text_map.get(main_suit, "—Ä–∞–∑–Ω—ã–µ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏")

    lines = ["‚ú® –ò—Ç–æ–≥ —Ä–∞—Å–∫–ª–∞–¥–∞:"]
    if majors >= 2:
        lines.append("–°–∏—Ç—É–∞—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –≤–ª–∏—è–Ω–∏–µ–º –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π ‚Äî –≤–∞—à–∏ —à–∞–≥–∏ —Å–µ–π—á–∞—Å –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –±—É–¥—É—â–µ–µ.")
    elif majors == 1:
        lines.append("–ï—Å—Ç—å –æ–¥–∏–Ω –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ.")

    if reversed_cnt >= 2:
        lines.append("–ú–Ω–æ–≥–æ –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç ‚Äî —ç—Ç–æ –∑–Ω–∞–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π –∏ –±–ª–æ–∫–æ–≤. –í–∞–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–µ–±–µ.")
    else:
        lines.append("–ö–∞—Ä—Ç—ã –≤ —Ü–µ–ª–æ–º —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ –≤–æ–∫—Ä—É–≥ –≤–∞—Å.")

    lines.append(f"–û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞ —Ä–∞—Å–∫–ª–∞–¥–∞: {suit_text}.")
    if topic.lower() != "–æ–±—â–µ–µ":
        lines.append(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {topic}.")
    if question:
        lines.append(f"–í–∞—à –≤–æ–ø—Ä–æ—Å: ¬´{question}¬ª. –ö–∞—Ä—Ç—ã –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–≤—è–∑–∞–Ω —Å –≤–∞—à–µ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å—é –º–µ–Ω—è—Ç—å—Å—è –∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.")

    lines.append("–ü–æ–º–Ω–∏—Ç–µ: –∫–∞—Ä—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏, –∞ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –æ—Å—Ç–∞—ë—Ç—Å—è –∑–∞ –≤–∞–º–∏.")
    return "\n".join(lines)

def format_spread_text(spread: str, cards: List[Dict[str, Any]]) -> str:
    pos = spread_positions(spread)
    chunks = []
    for i, c in enumerate(cards):
        title = card_title(c)
        meaning = (c.get("reversed") if c.get("reversed_flag") else c.get("upright")) or "‚Äî"
        chunks.append(f"<b>{pos[i]}:</b> {title}\n<i>{meaning}</i>")
    return "\n\n".join(chunks)

# -------------------- –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã --------------------
def menu_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üîÆ 1 –∫–∞—Ä—Ç–∞ ‚Äî —Å–æ–≤–µ—Ç"), KeyboardButton("üîÆ 3 –∫–∞—Ä—Ç—ã ‚Äî –ü/–ù/–ë"))
    kb.row(KeyboardButton("üßæ –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return kb

def topics_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.row(KeyboardButton("–û—Ç–Ω–æ—à–µ–Ω–∏—è"), KeyboardButton("–†–∞–±–æ—Ç–∞"))
    kb.row(KeyboardButton("–î–µ–Ω—å–≥–∏"), KeyboardButton("–û–±—â–µ–µ"))
    kb.row(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    return kb

# -------------------- –∫—É–ª–¥–∞—É–Ω --------------------
def check_cooldown(user_id: int) -> Optional[int]:
    last = LAST_USED_AT.get(user_id)
    if not last:
        return None
    remain = COOLDOWN_SECONDS - int(time.time() - last)
    return remain if remain > 0 else None

def mark_used(user_id: int):
    LAST_USED_AT[user_id] = time.time()

# -------------------- —Ö–µ–Ω–¥–ª–µ—Ä—ã --------------------
@dp.message_handler(commands=["start"])
async def cmd_start(m: types.Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –Ω–∞ –¢–∞—Ä–æ üé¥\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥ —á–µ—Ä–µ–∑ /menu.\n\n"
        "<i>–ü–æ–º–Ω–∏—Ç–µ: —Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ –≤—ã.</i>",
        reply_markup=menu_kb()
    )

@dp.message_handler(commands=["menu"])
async def cmd_menu(m: types.Message):
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥:", reply_markup=menu_kb())

@dp.message_handler(commands=["history"])
async def cmd_history(m: types.Message):
    items = list(HISTORY[m.from_user.id])
    if not items:
        return await m.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
    lines = ["<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥—ã:</b>"]
    for it in reversed(items):
        when = time.strftime("%Y-%m-%d %H:%M", time.localtime(it["ts"]))
        lines.append(f"‚Ä¢ {when} ‚Äî {('1 –∫–∞—Ä—Ç–∞' if it['spread']=='1' else '3 –∫–∞—Ä—Ç—ã')}: {it['topic']} ‚Äî ¬´{it['question'] or '–±–µ–∑ –≤–æ–ø—Ä–æ—Å–∞'}¬ª")
    await m.answer("\n".join(lines))

@dp.message_handler(lambda m: m.text in {"üîÆ 1 –∫–∞—Ä—Ç–∞ ‚Äî —Å–æ–≤–µ—Ç", "üîÆ 3 –∫–∞—Ä—Ç—ã ‚Äî –ü/–ù/–ë"})
async def on_pick_spread(m: types.Message):
    remain = check_cooldown(m.from_user.id)
    if remain:
        return await m.answer(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {remain} —Å–µ–∫ üôè")
    spread = "1" if "1 –∫–∞—Ä—Ç–∞" in m.text else "3"
    WAIT_TOPIC[m.from_user.id] = {"spread": spread}
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=topics_kb())

@dp.message_handler(lambda m: m.text in {"–û—Ç–Ω–æ—à–µ–Ω–∏—è", "–†–∞–±–æ—Ç–∞", "–î–µ–Ω—å–≥–∏", "–û–±—â–µ–µ"})
async def on_pick_topic(m: types.Message):
    state = WAIT_TOPIC.pop(m.from_user.id, None)
    if not state:
        return await m.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥ —á–µ—Ä–µ–∑ /menu.")
    WAIT_QUESTION[m.from_user.id] = {"spread": state["spread"], "topic": m.text}
    await m.answer("–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")))

@dp.message_handler(lambda m: m.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def on_cancel(m: types.Message):
    WAIT_TOPIC.pop(m.from_user.id, None)
    WAIT_QUESTION.pop(m.from_user.id, None)
    await m.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=menu_kb())

@dp.message_handler()
async def on_free_text(m: types.Message):
    qstate = WAIT_QUESTION.pop(m.from_user.id, None)
    if qstate:
        spread, topic, question = qstate["spread"], qstate["topic"], m.text.strip()
        remain = check_cooldown(m.from_user.id)
        if remain:
            WAIT_QUESTION[m.from_user.id] = qstate
            return await m.answer(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {remain} —Å–µ–∫ üôè")
        n = 1 if spread == "1" else 3
        cards = pick_cards(n)
        if not cards:
            return await m.answer("–ö–æ–ª–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", reply_markup=menu_kb())
        body = format_spread_text(spread, cards)
        summary = summarize_spread(cards, spread, topic, question)

        media_urls = [card_image_url(c) for c in cards if card_image_url(c)]
        if media_urls:
            media = [types.InputMediaPhoto(media=media_urls[0], caption=f"<b>–í–∞—à —Ä–∞—Å–∫–ª–∞–¥</b>\n\n{body}", parse_mode=ParseMode.HTML)]
            for u in media_urls[1:]:
                media.append(types.InputMediaPhoto(media=u))
            try:
                await m.answer_media_group(media)
            except Exception:
                await m.answer(f"<b>–í–∞—à —Ä–∞—Å–∫–ª–∞–¥</b>\n\n{body}")
        else:
            await m.answer(f"<b>–í–∞—à —Ä–∞—Å–∫–ª–∞–¥</b>\n\n{body}")

        await m.answer(summary, reply_markup=menu_kb())
        HISTORY[m.from_user.id].append({"ts": time.time(), "spread": spread, "topic": topic, "question": question})
        mark_used(m.from_user.id)
        return
    if not m.text.startswith("/"):
        await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥ —á–µ—Ä–µ–∑ /menu.", reply_markup=menu_kb())

# -------------------- –∑–∞–ø—É—Å–∫ --------------------
async def on_startup(app_: web.Application):
    if not RENDER_EXTERNAL_URL:
        log.warning("RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî webhook –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return
    log.info("Webhook URL (–Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ setWebhook): %s/webhook", RENDER_EXTERNAL_URL)

def main():
    port = int(os.getenv("PORT", "10000"))
    web.run_app(app, host="0.0.0.0", port=port, print=None)

if __name__ == "__main__":
    app.on_startup.append(on_startup)
    main()
