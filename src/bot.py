import os
import json
import random
import logging
from typing import List, Dict, Any

import requests
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_webhook

# ----------------------------
# ENV
# ----------------------------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
DECK_URL = os.getenv("DECK_URL", "").strip()  # jsDelivr URL –∫ deck.json

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# Render –æ—Ç–¥–∞—ë—Ç –≤–Ω–µ—à–Ω–∏–π –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–∏—Å–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π RENDER_EXTERNAL_URL
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL", "").rstrip("/")
# –ü–æ–¥ –∫–∞–∫–æ–π –ø–æ—Ä—Ç —Å–ª—É—à–∞–µ–º (Render –∑–∞–¥–∞—ë—Ç PORT)
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", "10000"))

# –ü—É—Ç—å –≤–µ–±—Ö—É–∫–∞ (–¥–µ–ª–∞–µ–º ‚Äú—Å–µ–∫—Ä–µ—Ç–Ω—ã–º‚Äù ‚Äî –≤–∫–ª—é—á–∞–µ–º —Ç–æ–∫–µ–Ω)
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
# –ü–æ–ª–Ω—ã–π URL –≤–µ–±—Ö—É–∫–∞. –ï—Å–ª–∏ Render –¥–∞–ª –≤–Ω–µ—à–Ω–∏–π URL ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ.
if RENDER_EXTERNAL_URL:
    WEBHOOK_URL = f"{RENDER_EXTERNAL_URL}{WEBHOOK_PATH}"
else:
    # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ—Ç (–ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫)
    WEBHOOK_URL = f"http://localhost:{WEBAPP_PORT}{WEBHOOK_PATH}"

# ----------------------------
# –õ–û–ì–ò
# ----------------------------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("tarot-bot")

# ----------------------------
# –ë–û–¢/–î–ò–°–ü–ï–¢–ß–ï–†
# ----------------------------
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# ----------------------------
# –ó–ê–ì–†–£–ó–ö–ê –ö–û–õ–û–î–´
# ----------------------------
deck: Dict[str, Any] = {"cards": []}

def load_deck() -> Dict[str, Any]:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π data/deck.json,
    –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ç—è–Ω–µ–º –ø–æ DECK_URL (jsDelivr) –∏ –∫–µ—à–∏—Ä—É–µ–º –≤ –ø–∞–º—è—Ç–∏.
    """
    # 1) –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    local_path = "data/deck.json"
    if os.path.exists(local_path):
        try:
            with open(local_path, "r", encoding="utf-8") as f:
                d = json.load(f)
                log.info("–ö–æ–ª–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ: %s –∫–∞—Ä—Ç", len(d.get("cards", [])))
                return d
        except Exception as e:
            log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ª–æ–¥—É: %r", e)

    # 2) CDN
    if DECK_URL:
        try:
            r = requests.get(DECK_URL, timeout=10)
            r.raise_for_status()
            d = r.json()
            log.info("–ö–æ–ª–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å %s: %s –∫–∞—Ä—Ç", DECK_URL, len(d.get("cards", [])))
            return d
        except Exception as e:
            log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–ª–æ–¥—É –ø–æ URL (%s): %r", DECK_URL, e)

    log.error("–ö–æ–ª–æ–¥–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∏ –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–∏ –ø–æ URL ‚Äî —Ä–∞–±–æ—Ç–∞—é —Å –ø—É—Å—Ç–æ–π.")
    return {"cards": []}

deck = load_deck()
cards: List[Dict[str, Any]] = deck.get("cards", [])
image_base_url = deck.get("image_base_url", "").rstrip("/")

# ----------------------------
# –•–ï–õ–ü–ï–†–´
# ----------------------------
def pick_random_card() -> Dict[str, Any]:
    if not cards:
        return {}
    card = random.choice(cards).copy()
    # —Ä–µ—à–∞–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
    reversed_percent = deck.get("reversals_percent", 30)
    is_reversed = random.randint(1, 100) <= reversed_percent
    card["is_reversed"] = is_reversed
    return card

def card_caption(card: Dict[str, Any]) -> str:
    title_ru = card.get("title_ru") or card.get("title_en") or "–ö–∞—Ä—Ç–∞"
    orientation = "–ü–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è" if card.get("is_reversed") else "–ü—Ä—è–º–∞—è"
    return f"{title_ru}\n{orientation}"

def card_image_url(card: Dict[str, Any]) -> str:
    img_name = card.get("image", "")
    if not img_name:
        return ""
    if image_base_url:
        return f"{image_base_url}/{img_name}"
    return img_name  # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —É–∂–µ –ø–æ–ª–Ω—ã–π URL

# ----------------------------
# –•–ï–ù–î–õ–ï–†–´
# ----------------------------
@dp.message_handler(commands=["start", "help"])
async def start_help(m: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –¢–∞—Ä–æ-–±–æ—Ç üîÆ\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/card ‚Äî –≤—ã—Ç—è–Ω—É—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É\n"
        "/three ‚Äî —Ç—Ä–∏ –∫–∞—Ä—Ç—ã (–ø—Ä–æ—à–ª–æ–µ/–Ω–∞—Å—Ç–æ—è—â–µ–µ/–±—É–¥—É—â–µ–µ)\n"
    )
    await m.reply(text)

@dp.message_handler(commands=["card"])
async def one_card(m: types.Message):
    card = pick_random_card()
    if not card:
        await m.reply("–ö–æ–ª–æ–¥–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ üòï")
        return
    caption = card_caption(card)
    img_url = card_image_url(card)
    if img_url:
        await m.answer_photo(photo=img_url, caption=caption)
    else:
        await m.reply(caption)

@dp.message_handler(commands=["three"])
async def three_cards(m: types.Message):
    if len(cards) < 3:
        await m.reply("–ö–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–∫–∞ –º–∞–ª–æ –¥–ª—è —Ç—Ä—ë—Ö–∫–∞—Ä—Ç–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ üòï")
        return
    chosen = random.sample(cards, 3)
    for i, card in enumerate(chosen, start=1):
        card = card.copy()
        reversed_percent = deck.get("reversals_percent", 30)
        card["is_reversed"] = random.randint(1, 100) <= reversed_percent
        caption = f"{i}/3 ‚Ä¢ " + card_caption(card)
        img_url = card_image_url(card)
        if img_url:
            await m.answer_photo(photo=img_url, caption=caption)
        else:
            await m.reply(caption)

# ----------------------------
# –í–ï–ë–•–£–ö–ò (aiogram v2)
# ----------------------------
async def on_startup(dp: Dispatcher):
    # —Å—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
    log.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", WEBHOOK_URL)

async def on_shutdown(dp: Dispatcher):
    log.info("–£–¥–∞–ª—è—é –≤–µ–±—Ö—É–∫‚Ä¶")
    await bot.delete_webhook()

def main():
    # –∑–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ aiohttp, –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É—à–∞–µ—Ç PORT –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–µ–±—Ö—É–∫–∏
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )

if __name__ == "__main__":
    main()
