import logging
import os
import json
import random
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_webhook
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tarot-bot")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
API_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_PATH = "/webhook"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 5000))
RENDER_URL = os.getenv("RENDER_EXTERNAL_URL", "").rstrip("/")
WEBHOOK_URL = f"{RENDER_URL}{WEBHOOK_PATH}"

# --- FSM –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏ ---
class Form(StatesGroup):
    waiting_for_situation = State()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
Bot.set_current(bot)
Dispatcher.set_current(dp)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–æ–¥—ã ---
with open("data/deck.json", "r", encoding="utf-8") as f:
    TAROT_DECK = json.load(f)
logger.info("–ö–æ–ª–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ –∏–∑ data/deck.json")

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
def menu_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üîÆ –û—Ç–Ω–æ—à–µ–Ω–∏—è", "üíº –†–∞–±–æ—Ç–∞", "üí∞ –§–∏–Ω–∞–Ω—Å—ã", "üåå –û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥")
    return kb

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç ---
def draw_cards(n=3):
    return random.sample(TAROT_DECK, n)

# --- –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è ---
def interpret_cards(cards, theme, situation):
    text = f"‚ú® –¢–µ–º–∞: *{theme}*\nüìù –°–∏—Ç—É–∞—Ü–∏—è: _{situation}_\n\n"
    for i, card in enumerate(cards, 1):
        text += f"**{i}. {card['name']}** ‚Äî {card['meaning']}\n\n"

    text += "üîÆ *–ò—Ç–æ–≥ —Ä–∞—Å–∫–ª–∞–¥–∞*\n"
    if theme == "–û—Ç–Ω–æ—à–µ–Ω–∏—è":
        text += ("–ö–∞—Ä—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –¥–∏–Ω–∞–º–∏–∫—É –≤–∞—à–∏—Ö –ª–∏—á–Ω—ã—Ö —Å–≤—è–∑–µ–π. "
                 "–ï—Å—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏, –≥–¥–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—è–≤–∏—Ç—å —Ç–µ—Ä–ø–µ–Ω–∏–µ –∏ –º—è–≥–∫–æ—Å—Ç—å, "
                 "–∞ –≥–¥–µ –≤–∞–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã. –°–ª–µ–¥—É—è —ç—Ç–∏–º —É—Ä–æ–∫–∞–º, "
                 "–≤—ã —É–∫—Ä–µ–ø–∏—Ç–µ —Å–≤—è–∑—å –∏ –∏–∑–±–µ–∂–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤.")
    elif theme == "–†–∞–±–æ—Ç–∞":
        text += ("–í –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ñ–µ—Ä–µ —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞–º–µ–∫–∞–µ—Ç –Ω–∞ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω—ã. "
                 "–°–µ–π—á–∞—Å –≤–∞–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É, –Ω–æ –Ω–µ —Å–ø–µ—à–∏—Ç—å —Å —Ä–µ—à–µ–Ω–∏—è–º–∏. "
                 "–î–æ–≤–µ—Ä—è–π—Ç–µ –æ–ø—ã—Ç—É –∏ –∏—â–∏—Ç–µ –Ω–æ–≤—ã–µ –ø—É—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ ‚Äî –æ–Ω–∏ —É–∂–µ —Ä—è–¥–æ–º.")
    elif theme == "–§–∏–Ω–∞–Ω—Å—ã":
        text += ("–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è —Ç—Ä–µ–±—É–µ—Ç –∞–∫–∫—É—Ä–∞—Ç–Ω–æ—Å—Ç–∏. "
                 "–ö–∞—Ä—Ç—ã –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç –∏–∑–±–µ–≥–∞—Ç—å —Ä–µ–∑–∫–∏—Ö —Ç—Ä–∞—Ç –∏ –¥–µ—Ä–∂–∞—Ç—å –±–∞–ª–∞–Ω—Å. "
                 "–ï—Å—Ç—å –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —É–ª—É—á—à–µ–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏, –µ—Å–ª–∏ –≤–ª–æ–∂–∏—Ç—å —É—Å–∏–ª–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.")
    else:
        text += ("–í–∞—à –ø—É—Ç—å —Å–µ–π—á–∞—Å —Å–≤—è–∑–∞–Ω —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ —É—Ä–æ–∫–∞–º–∏. "
                 "–ö–∞—Ä—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –¥–æ–≤–µ—Ä–∏—è –∫ —Å–µ–±–µ –∏ —Å–≤–æ–∏–º —Ä–µ—à–µ–Ω–∏—è–º. "
                 "–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–Ω–∞–∫–∞–º, –∏ –æ–Ω–∏ —É–∫–∞–∂—É—Ç –≤–µ—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")

    return text

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥. ‚ú®\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —Ä–∞—Å–∫–ª–∞–¥–∞ –≤ –º–µ–Ω—é:",
        reply_markup=menu_kb()
    )

@dp.message_handler(lambda m: m.text in ["üîÆ –û—Ç–Ω–æ—à–µ–Ω–∏—è", "üíº –†–∞–±–æ—Ç–∞", "üí∞ –§–∏–Ω–∞–Ω—Å—ã", "üåå –û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥"])
async def choose_theme(message: types.Message, state: FSMContext):
    theme = message.text.replace("üîÆ ", "").replace("üíº ", "").replace("üí∞ ", "").replace("üåå ", "")
    await state.update_data(theme=theme)
    await Form.waiting_for_situation.set()
    await message.answer(f"–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ *{theme}*. "
                         "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º.")

@dp.message_handler(state=Form.waiting_for_situation)
async def handle_situation(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    theme = user_data.get("theme", "–û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥")
    situation = message.text
    cards = draw_cards(3)
    text = interpret_cards(cards, theme, situation)
    await message.answer(text, parse_mode="Markdown", reply_markup=menu_kb())
    await state.finish()

# --- Webhook ---
async def on_startup(dp):
    if WEBHOOK_URL:
        await bot.set_webhook(WEBHOOK_URL)
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    else:
        logger.warning("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω!")

async def on_shutdown(dp):
    logger.info("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ...")
    await bot.delete_webhook()

def main():
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )

if __name__ == "__main__":
    main()
