import json
import logging
import os
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.executor import start_webhook

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
API_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_HOST = os.getenv("RENDER_EXTERNAL_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä https://tarot-bot-12u6.onrender.com
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 5000))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tarot-bot")

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ================== –°–û–°–¢–û–Ø–ù–ò–Ø ==================
class TarotStates(StatesGroup):
    waiting_for_topic = State()
    waiting_for_situation = State()
    waiting_for_spread = State()

# ================== –ó–ê–ì–†–£–ó–ö–ê –ö–û–õ–û–î–´ ==================
with open("data/deck.json", "r", encoding="utf-8") as f:
    deck = json.load(f)
cards = deck["cards"]
IMAGE_BASE = deck["image_base_url"]

# ================== –ò–°–¢–û–†–ò–Ø ==================
user_history = {}

def save_history(user_id, spread):
    if user_id not in user_history:
        user_history[user_id] = []
    user_history[user_id].insert(0, spread)
    user_history[user_id] = user_history[user_id][:5]

# ================== –ö–ù–û–ü–ö–ò ==================
def topic_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üîÆ –û—Ç–Ω–æ—à–µ–Ω–∏—è"), KeyboardButton("üíº –†–∞–±–æ—Ç–∞"))
    kb.add(KeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å—ã"), KeyboardButton("üåü –û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥"))
    return kb

def spread_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("1 –∫–∞—Ä—Ç–∞"), KeyboardButton("3 –∫–∞—Ä—Ç—ã"))
    kb.add(KeyboardButton("–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç"))
    return kb

# ================== –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–ê–†–¢ ==================
def draw_cards(n):
    result = []
    for _ in range(n):
        card = random.choice(cards)
        is_reversed = random.randint(1, 100) <= deck["reversals_percent"]
        result.append({
            "title": card["title_ru"],
            "upright": card["upright"],
            "reversed": card["reversed"],
            "image": IMAGE_BASE + card["image"],
            "is_reversed": is_reversed
        })
    return result

def interpret_cards(cards_drawn, situation, topic, spread_type):
    text = f"‚ú® –†–∞—Å–∫–ª–∞–¥ –ø–æ —Ç–µ–º–µ *{topic}* ({spread_type}) ‚ú®\n\n"
    positions = ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ"]

    for i, card in enumerate(cards_drawn):
        pos = positions[i] if spread_type == "3 –∫–∞—Ä—Ç—ã" else f"–ö–∞—Ä—Ç–∞ {i+1}"
        orientation = "–ü–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è" if card["is_reversed"] else "–ü—Ä—è–º–∞—è"
        meaning = card["reversed"] if card["is_reversed"] else card["upright"]

        text += f"üîπ *{pos}:* {card['title']} ({orientation})\n{meaning}\n\n"

    text += f"üåô *–ò—Ç–æ–≥:* –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ ({situation}), –∫–∞—Ä—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ–±—â–∏–π —Å–æ–≤–µ—Ç: –¥–æ–≤–µ—Ä—è–π—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—É, –∏—â–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –±—É–¥—å—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã –∫ –ø–µ—Ä–µ–º–µ–Ω–∞–º."
    return text

# ================== –•–ï–ù–î–õ–ï–†–´ ==================
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥. ‚ú®\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —Ä–∞—Å–∫–ª–∞–¥–∞:", reply_markup=topic_kb())
    await TarotStates.waiting_for_topic.set()

@dp.message_handler(lambda m: m.text in ["üîÆ –û—Ç–Ω–æ—à–µ–Ω–∏—è", "üíº –†–∞–±–æ—Ç–∞", "üí∞ –§–∏–Ω–∞–Ω—Å—ã", "üåü –û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥"], state=TarotStates.waiting_for_topic)
async def choose_topic(message: types.Message, state: FSMContext):
    topic = message.text.replace("üîÆ ", "").replace("üíº ", "").replace("üí∞ ", "").replace("üåü ", "")
    await state.update_data(topic=topic)
    await message.answer(f"üìù –û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ *{topic}*.", reply_markup=types.ReplyKeyboardRemove())
    await TarotStates.waiting_for_situation.set()

@dp.message_handler(state=TarotStates.waiting_for_situation)
async def describe_situation(message: types.Message, state: FSMContext):
    await state.update_data(situation=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞:", reply_markup=spread_kb())
    await TarotStates.waiting_for_spread.set()

@dp.message_handler(lambda m: m.text in ["1 –∫–∞—Ä—Ç–∞", "3 –∫–∞—Ä—Ç—ã", "–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç"], state=TarotStates.waiting_for_spread)
async def make_spread(message: types.Message, state: FSMContext):
    data = await state.get_data()
    topic, situation = data["topic"], data["situation"]
    spread_type = message.text

    if spread_type == "1 –∫–∞—Ä—Ç–∞":
        n = 1
    elif spread_type == "3 –∫–∞—Ä—Ç—ã":
        n = 3
    else:
        n = 10

    drawn = draw_cards(n)
    interpretation = interpret_cards(drawn, situation, topic, spread_type)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã
    media = [types.InputMediaPhoto(card["image"], caption=f"{card['title']} ({'–ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è' if card['is_reversed'] else '–ø—Ä—è–º–∞—è'})") if i == 0 else types.InputMediaPhoto(card["image"]) for i, card in enumerate(drawn)]
    await message.answer_media_group(media)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    await message.answer(interpretation, parse_mode="Markdown")

    save_history(message.from_user.id, {"topic": topic, "situation": situation, "spread": spread_type, "cards": drawn})

    await state.finish()

# ================== –í–ï–ë–•–£–ö ==================
async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(dp):
    await bot.delete_webhook()

if __name__ == "__main__":
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        skip_updates=True,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
