import os
import json
import random
import logging
import time
import sqlite3
from pathlib import Path
from typing import List, Dict, Any, Optional, Tuple

import requests
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.executor import start_webhook

# =========================
# ENV & constants
# =========================
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
DECK_URL = os.getenv("DECK_URL", "").strip()  # CDN deck.json (jsDelivr)
COOLDOWN_SECONDS = int(os.getenv("COOLDOWN_SECONDS", "360"))  # 6 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL", "").rstrip("/")
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", "10000"))
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
WEBHOOK_URL = f"{RENDER_EXTERNAL_URL}{WEBHOOK_PATH}" if RENDER_EXTERNAL_URL else f"http://localhost:{WEBAPP_PORT}{WEBHOOK_PATH}"

# =========================
# Logging
# =========================
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("tarot-bot")

# =========================
# Bot / Dispatcher (FSM)
# =========================
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# =========================
# Data dirs & DB
# =========================
DATA_DIR = Path("data")
DATA_DIR.mkdir(parents=True, exist_ok=True)
DB_PATH = DATA_DIR / "history.db"

def _db():
    conn = sqlite3.connect(DB_PATH)
    conn.execute("""
        CREATE TABLE IF NOT EXISTS history (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          user_id INTEGER NOT NULL,
          ts INTEGER NOT NULL,
          spread TEXT NOT NULL,
          category TEXT,
          topic TEXT,
          cards_json TEXT NOT NULL
        )
    """)
    conn.execute("""
        CREATE TABLE IF NOT EXISTS cooldown (
          user_id INTEGER PRIMARY KEY,
          last_ts INTEGER NOT NULL
        )
    """)
    conn.commit()
    return conn

# =========================
# Deck loading
# =========================
deck: Dict[str, Any] = {"cards": []}
cards: List[Dict[str, Any]] = []
image_base_url: str = ""
reversals_percent: int = 30

def load_deck() -> Dict[str, Any]:
    """
    1) –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π data/deck.json
    2) –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ ‚Äî —Ç—è–Ω–µ–º –ø–æ DECK_URL (jsDelivr)
    """
    local_path = DATA_DIR / "deck.json"
    if local_path.exists():
        try:
            with open(local_path, "r", encoding="utf-8") as f:
                d = json.load(f)
                log.info("–ö–æ–ª–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ: %s –∫–∞—Ä—Ç", len(d.get("cards", [])))
                return d
        except Exception as e:
            log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ª–æ–¥—É: %r", e)

    if DECK_URL:
        try:
            r = requests.get(DECK_URL, timeout=10)
            r.raise_for_status()
            d = r.json()
            log.info("–ö–æ–ª–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ URL (%s): %s –∫–∞—Ä—Ç", DECK_URL, len(d.get("cards", [])))
            return d
        except Exception as e:
            log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–ª–æ–¥—É –ø–æ URL (%s): %r", DECK_URL, e)

    log.error("–ö–æ–ª–æ–¥–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∏ –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–∏ –ø–æ URL ‚Äî —Ä–∞–±–æ—Ç–∞—é —Å –ø—É—Å—Ç–æ–π.")
    return {"cards": []}

def deck_init():
    global deck, cards, image_base_url, reversals_percent
    deck = load_deck()
    cards = deck.get("cards", [])
    image_base_url = (deck.get("image_base_url") or "").rstrip("/")
    reversals_percent = int(deck.get("reversals_percent", 30))

deck_init()

# =========================
# Helpers: cards & text
# =========================
CATEGORIES = [
    ("relationships", "‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è"),
    ("work", "üíº –†–∞–±–æ—Ç–∞"),
    ("money", "üí∞ –î–µ–Ω—å–≥–∏"),
    ("health", "ü©∫ –ó–¥–æ—Ä–æ–≤—å–µ"),
    ("growth", "üå± –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ"),
    ("general", "‚ú® –û–±—â–µ–µ"),
]

def _is_blank(val: Optional[str]) -> bool:
    return not val or val.strip() == "" or val.strip() == "‚Ä¶"

def pick_card() -> Dict[str, Any]:
    c = random.choice(cards).copy()
    c["is_reversed"] = (random.randint(1, 100) <= reversals_percent)
    return c

def card_caption(card: Dict[str, Any]) -> str:
    title_ru = card.get("title_ru") or card.get("title_en") or "–ö–∞—Ä—Ç–∞"
    orientation = "–ü–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è" if card.get("is_reversed") else "–ü—Ä—è–º–∞—è"
    return f"{title_ru}\n{orientation}"

def card_image_url(card: Dict[str, Any]) -> str:
    img_name = card.get("image", "")
    if not img_name:
        return ""
    if image_base_url:
        return f"{image_base_url}/{img_name}"
    return img_name

def meaning_text(card: Dict[str, Any]) -> str:
    is_rev = card.get("is_reversed", False)
    raw = (card.get("reversed") if is_rev else card.get("upright")) or ""
    if not _is_blank(raw):
        return raw.strip()
    title = card.get("title_ru") or card.get("title_en") or "–ö–∞—Ä—Ç–∞"
    if is_rev:
        return f"{title}: –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ ‚Äî —Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –∞–∫–∫—É—Ä–∞—Ç–Ω–æ—Å—Ç–∏, –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏ –æ–∂–∏–¥–∞–Ω–∏–π –∏ –≤—Ä–µ–º–µ–Ω–∏."
    else:
        return f"{title}: –ø—Ä—è–º–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ ‚Äî —ç–Ω–µ—Ä–≥–∏—è –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞, –¥–µ–π—Å—Ç–≤—É–π—Ç–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ."

def summarize_reading(topic: str, category_code: str, picked: List[Dict[str, Any]]) -> str:
    rev_count = sum(1 for c in picked if c.get("is_reversed"))
    tendency = "—Å–∫–æ—Ä–µ–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–∞" if rev_count <= len(picked) // 2 else "—Ç—Ä–µ–±—É–µ—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏"
    human_cat = dict(CATEGORIES).get(category_code, "‚ú® –û–±—â–µ–µ")
    advice = "–î–≤–∏–≥–∞–π—Ç–µ—Å—å —à–∞–≥ –∑–∞ —à–∞–≥–æ–º, –æ—Ç–º–µ—á–∞—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã." if rev_count else "–•–æ—Ä–æ—à–∏–π –º–æ–º–µ–Ω—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è—Ö."
    return (
        f"–¢–µ–º–∞: {human_cat}. –ó–∞–ø—Ä–æ—Å: {topic}\n"
        f"–ü–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç: {rev_count} –∏–∑ {len(picked)} ‚Äî —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è {tendency}.\n"
        f"–ò—Ç–æ–≥: {advice}\n\n"
        "–ü–æ–º–Ω–∏—Ç–µ: —Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –≤—ã. –õ—é–±–æ–π –≤—ã–±–æ—Ä —Ç—è–Ω–µ—Ç –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è ‚Äî –≤—ã–±–∏—Ä–∞–π—Ç–µ —Ç–æ, —á—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∞—Å –≤ –¥–æ–ª–≥—É—é."
    )

# =========================
# Helpers: cooldown & history
# =========================
def get_last_ts(user_id: int) -> Optional[int]:
    with _db() as conn:
        cur = conn.execute("SELECT last_ts FROM cooldown WHERE user_id=?", (user_id,))
        row = cur.fetchone()
        return row[0] if row else None

def set_last_ts(user_id: int, ts: int):
    with _db() as conn:
        conn.execute(
            "INSERT INTO cooldown(user_id, last_ts) VALUES(?, ?) ON CONFLICT(user_id) DO UPDATE SET last_ts=excluded.last_ts",
            (user_id, ts),
        )
        conn.commit()

def check_cooldown(user_id: int) -> Tuple[bool, int]:
    """
    return (allowed, seconds_left)
    """
    now = int(time.time())
    last = get_last_ts(user_id)
    if last is None:
        return True, 0
    diff = now - last
    if diff >= COOLDOWN_SECONDS:
        return True, 0
    return False, COOLDOWN_SECONDS - diff

def save_history(user_id: int, spread: str, category: str, topic: str, picked: List[Dict[str, Any]]):
    payload = {
        "cards": [
            {
                "code": c.get("code"),
                "title_ru": c.get("title_ru"),
                "is_reversed": c.get("is_reversed", False),
            } for c in picked
        ]
    }
    with _db() as conn:
        conn.execute(
            "INSERT INTO history(user_id, ts, spread, category, topic, cards_json) VALUES (?, ?, ?, ?, ?, ?)",
            (user_id, int(time.time()), spread, category, topic, json.dumps(payload, ensure_ascii=False)),
        )
        conn.commit()

def fetch_history(user_id: int, limit: int = 5) -> List[Dict[str, Any]]:
    with _db() as conn:
        cur = conn.execute(
            "SELECT ts, spread, category, topic, cards_json FROM history WHERE user_id=? ORDER BY ts DESC LIMIT ?",
            (user_id, limit),
        )
        out = []
        for ts, spread, category, topic, cards_json in cur.fetchall():
            out.append({
                "ts": ts,
                "spread": spread,
                "category": category,
                "topic": topic,
                "cards": json.loads(cards_json).get("cards", []),
            })
        return out

# =========================
# FSM states
# =========================
class Flow(StatesGroup):
    choosing_spread = State()
    choosing_category_for_one = State()
    entering_topic_for_one = State()
    choosing_category_for_three = State()
    entering_topic_for_three = State()

# =========================
# Keyboards
# =========================
def kb_main() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("1 –∫–∞—Ä—Ç–∞", callback_data="spread:one"),
        InlineKeyboardButton("3 –∫–∞—Ä—Ç—ã", callback_data="spread:three"),
    )
    kb.add(InlineKeyboardButton("üóÇ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history:open"))
    return kb

def kb_categories(prefix: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    for code, label in CATEGORIES:
        kb.insert(InlineKeyboardButton(label, callback_data=f"{prefix}:{code}"))
    return kb

# =========================
# Handlers: menu & help
# =========================
@dp.message_handler(commands=["start", "help", "menu"])
async def start_menu(m: types.Message, state: FSMContext):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –¢–∞—Ä–æ-–±–æ—Ç üîÆ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é.\n"
        "–í–∞–∂–Ω–æ: —ç—Ç–æ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å. –†–µ—à–µ–Ω–∏—è ‚Äî –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ."
    )
    await m.answer(text, reply_markup=kb_main())
    await Flow.choosing_spread.set()

# =========================
# Handlers: open history
# =========================
@dp.callback_query_handler(lambda c: c.data == "history:open", state="*")
async def open_history(cq: CallbackQuery, state: FSMContext):
    user_id = cq.from_user.id
    rows = fetch_history(user_id, limit=5)
    if not rows:
        await cq.message.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥!")
    else:
        parts = ["–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥—ã:"]
        for i, h in enumerate(rows, start=1):
            when = time.strftime("%Y-%m-%d %H:%M", time.localtime(h["ts"]))
            parts.append(f"{i}) {when} ‚Ä¢ {h['spread']} ‚Ä¢ {dict(CATEGORIES).get(h['category'], h['category'])}\n‚Äî {h['topic']}")
        await cq.message.answer("\n\n".join(parts))
    await cq.answer()

# =========================
# Handlers: choose spread
# =========================
@dp.callback_query_handler(lambda c: c.data.startswith("spread:"), state=Flow.choosing_spread)
async def choose_spread(cq: CallbackQuery, state: FSMContext):
    spread = cq.data.split(":", 1)[1]  # one | three

    # cooldown check
    allowed, left = check_cooldown(cq.from_user.id)
    if not allowed:
        mins = max(1, left // 60)
        await cq.message.answer(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {mins} –º–∏–Ω. —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –±–æ—Ç–∞ üôè")
        await cq.answer()
        return

    if spread == "one":
        await state.update_data(spread="one")
        await cq.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=kb_categories("cat_one"))
        await Flow.choosing_category_for_one.set()
    elif spread == "three":
        if len(cards) < 3:
            await cq.message.answer("–ö–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–∫–∞ –º–∞–ª–æ –¥–ª—è 3-–∫–∞—Ä—Ç–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ üòï")
            await cq.answer()
            return
        await state.update_data(spread="three")
        await cq.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=kb_categories("cat_three"))
        await Flow.choosing_category_for_three.set()
    await cq.answer()

# =========================
# Handlers: categories ‚Üí topic input
# =========================
@dp.callback_query_handler(lambda c: c.data.startswith("cat_one:"), state=Flow.choosing_category_for_one)
async def cat_one(cq: CallbackQuery, state: FSMContext):
    category = cq.data.split(":", 1)[1]
    await state.update_data(category=category)
    await cq.message.answer("–ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π:")
    await Flow.entering_topic_for_one.set()
    await cq.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("cat_three:"), state=Flow.choosing_category_for_three)
async def cat_three(cq: CallbackQuery, state: FSMContext):
    category = cq.data.split(":", 1)[1]
    await state.update_data(category=category)
    await cq.message.answer("–ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π:")
    await Flow.entering_topic_for_three.set()
    await cq.answer()

# =========================
# Handlers: do spreads
# =========================
@dp.message_handler(state=Flow.entering_topic_for_one)
async def do_one(m: types.Message, state: FSMContext):
    if not cards:
        await m.reply("–ö–æ–ª–æ–¥–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ üòï")
        await state.finish()
        return

    data = await state.get_data()
    topic = (m.text or "").strip()
    category = data.get("category", "general")

    # pick
    c = pick_card()
    cap = card_caption(c)
    img = card_image_url(c)
    if img:
        await m.answer_photo(photo=img, caption=cap)
    else:
        await m.reply(cap)

    meaning = meaning_text(c)
    summary = summarize_reading(topic, category, [c])
    await m.answer(f"–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:\n‚Äî {meaning}\n\n{summary}")

    # save & cooldown
    save_history(m.from_user.id, "one", category, topic, [c])
    set_last_ts(m.from_user.id, int(time.time()))

    # back to menu
    await m.answer("–ì–æ—Ç–æ–≤–æ. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:", reply_markup=kb_main())
    await Flow.choosing_spread.set()

@dp.message_handler(state=Flow.entering_topic_for_three)
async def do_three(m: types.Message, state: FSMContext):
    if len(cards) < 3:
        await m.reply("–ö–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–∫–∞ –º–∞–ª–æ –¥–ª—è 3-–∫–∞—Ä—Ç–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ üòï")
        await state.finish()
        return

    data = await state.get_data()
    topic = (m.text or "").strip()
    category = data.get("category", "general")

    chosen = random.sample(cards, 3)
    positions = ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ"]
    picked = []

    for i, card in enumerate(chosen):
        card = card.copy()
        card["is_reversed"] = (random.randint(1, 100) <= reversals_percent)
        picked.append(card)

        cap = f"{positions[i]} ‚Ä¢ " + card_caption(card)
        img = card_image_url(card)
        if img:
            await m.answer_photo(photo=img, caption=cap)
        else:
            await m.reply(cap)
        await m.answer(f"–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è ({positions[i]}):\n‚Äî {meaning_text(card)}")

    summary = summarize_reading(topic, category, picked)
    await m.answer(summary)

    # save & cooldown
    save_history(m.from_user.id, "three", category, topic, picked)
    set_last_ts(m.from_user.id, int(time.time()))

    await m.answer("–ì–æ—Ç–æ–≤–æ. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:", reply_markup=kb_main())
    await Flow.choosing_spread.set()

# =========================
# Webhook lifecycle
# =========================
async def on_startup(dp_: Dispatcher):
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
    log.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", WEBHOOK_URL)

async def on_shutdown(dp_: Dispatcher):
    log.info("–£–¥–∞–ª—è—é –≤–µ–±—Ö—É–∫‚Ä¶")
    await bot.delete_webhook()

def main():
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )

if __name__ == "__main__":
    main()
