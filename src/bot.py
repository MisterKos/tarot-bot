import os
import json
import random
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_webhook
from aiohttp import web

# ---------------------- –õ–û–ì–ò ----------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tarot-bot")

# ---------------------- –ù–ê–°–¢–†–û–ô–ö–ò ----------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("RENDER_EXTERNAL_URL", "").rstrip("/")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 5000))

DECK_PATH = "data/deck.json"
CARDS_PATH = "assets/rw/cards"
HISTORY_PATH = "data/history.json"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# ---------------------- –ó–ê–ì–†–£–ó–ö–ê –ö–û–õ–û–î–´ ----------------------
with open(DECK_PATH, "r", encoding="utf-8") as f:
    DECK = json.load(f)

def get_card(card_name: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ –∏–º–µ–Ω–∏"""
    for card in DECK:
        if card["name"] == card_name:
            return card
    return None

# ---------------------- –°–û–°–¢–û–Ø–ù–ò–Ø ----------------------
user_context = {}  # user_id -> {"topic":..., "situation":...}

# ---------------------- –ò–°–¢–û–†–ò–Ø ----------------------
def save_history(user_id, spread_type, cards, interpretation):
    try:
        if os.path.exists(HISTORY_PATH):
            with open(HISTORY_PATH, "r", encoding="utf-8") as f:
                history = json.load(f)
        else:
            history = {}

        user_id = str(user_id)
        if user_id not in history:
            history[user_id] = []

        history[user_id].insert(0, {
            "spread": spread_type,
            "cards": cards,
            "interpretation": interpretation
        })

        history[user_id] = history[user_id][:5]  # —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
        with open(HISTORY_PATH, "w", encoding="utf-8") as f:
            json.dump(history, f, ensure_ascii=False, indent=2)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

# ---------------------- –ì–ï–ù–ï–†–ê–¶–ò–Ø –†–ê–°–ö–õ–ê–î–ê ----------------------
def generate_interpretation(spread_type, cards, situation, topic):
    text = f"‚ú® *–†–∞—Å–∫–ª–∞–¥: {spread_type}*\n"
    text += f"üîÆ –¢–µ–º–∞: *{topic}*\n"
    if situation:
        text += f"üìù –í–æ–ø—Ä–æ—Å: _{situation}_\n\n"

    # –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã
    for i, card_name in enumerate(cards, 1):
        card = get_card(card_name)
        if card:
            text += f"**–ö–∞—Ä—Ç–∞ {i}: {card['name']}**\n"
            text += f"_{card['meaning']}_\n\n"

    # –ò—Ç–æ–≥–æ–≤–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
    text += "üåü *–ò—Ç–æ–≥–æ–≤–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ:*\n"
    text += (
        "–ö–∞—Ä—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–∞–∂–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏. "
        "–í –Ω–∏—Ö –æ—Ç—Ä–∞–∂–∞—é—Ç—Å—è –∫–∞–∫ —Å–∫—Ä—ã—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, —Ç–∞–∫ –∏ –ø—Ä–µ–¥–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–∏—è. "
        "–ì–ª–∞–≤–Ω—ã–π —Å–æ–≤–µ—Ç ‚Äî —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å, –¥–æ–≤–µ—Ä—è—Ç—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ –∏–¥—Ç–∏ —à–∞–≥ –∑–∞ —à–∞–≥–æ–º. "
        "–í–∞—à –ø—É—Ç—å –æ—Ç–∫—Ä—ã—Ç, –∏ –≤—ã–±–æ—Ä –∑–∞ –≤–∞–º–∏. ‚ú®"
    )

    return text

# ---------------------- –ö–ù–û–ü–ö–ò ----------------------
def topic_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üîÆ –û—Ç–Ω–æ—à–µ–Ω–∏—è", "üíº –†–∞–±–æ—Ç–∞")
    kb.add("üí∞ –§–∏–Ω–∞–Ω—Å—ã", "üåü –û–±—â–∏–π")
    return kb

def spread_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("1 –∫–∞—Ä—Ç–∞", "3 –∫–∞—Ä—Ç—ã")
    kb.add("–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç")
    return kb

# ---------------------- –•–ï–ù–î–õ–ï–†–´ ----------------------
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥. ‚ú®\n–í—ã–±–µ—Ä–∏ —Ç–µ–º—É —Ä–∞—Å–∫–ª–∞–¥–∞:", reply_markup=topic_kb())

@dp.message_handler(lambda m: m.text in ["üîÆ –û—Ç–Ω–æ—à–µ–Ω–∏—è", "üíº –†–∞–±–æ—Ç–∞", "üí∞ –§–∏–Ω–∞–Ω—Å—ã", "üåü –û–±—â–∏–π"])
async def choose_topic(message: types.Message):
    user_context[message.from_user.id] = {"topic": message.text, "situation": None}
    await message.answer("–û–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ:")

@dp.message_handler(lambda m: m.from_user.id in user_context and user_context[m.from_user.id].get("situation") is None)
async def save_situation(message: types.Message):
    user_context[message.from_user.id]["situation"] = message.text
    await message.answer("–ö–∞–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=spread_kb())

@dp.message_handler(lambda m: m.text in ["1 –∫–∞—Ä—Ç–∞", "3 –∫–∞—Ä—Ç—ã", "–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç"])
async def do_spread(message: types.Message):
    ctx = user_context.get(message.from_user.id)
    if not ctx:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É —á–µ—Ä–µ–∑ /start")
        return

    spread_type = message.text
    situation = ctx["situation"]
    topic = ctx["topic"]

    if spread_type == "1 –∫–∞—Ä—Ç–∞":
        cards = random.sample([c["name"] for c in DECK], 1)
    elif spread_type == "3 –∫–∞—Ä—Ç—ã":
        cards = random.sample([c["name"] for c in DECK], 3)
    else:  # –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç
        cards = random.sample([c["name"] for c in DECK], 10)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã
    for card_name in cards:
        path = os.path.join(CARDS_PATH, f"{card_name}.jpg")
        if os.path.exists(path):
            with open(path, "rb") as photo:
                await message.answer_photo(photo, caption=card_name)
        else:
            await message.answer(card_name)

    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
    interpretation = generate_interpretation(spread_type, cards, situation, topic)
    await message.answer(interpretation, parse_mode="Markdown")

    save_history(message.from_user.id, spread_type, cards, interpretation)

    user_context.pop(message.from_user.id, None)

# ---------------------- –í–ï–ë–•–£–ö ----------------------
async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(app):
    await bot.delete_webhook()
    logger.info("Webhook —É–¥–∞–ª—ë–Ω")

async def webhook_handler(request):
    data = await request.json()
    update = types.Update.to_object(data)
    await dp.process_update(update)
    return web.Response()

def main():
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, webhook_handler)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)

if __name__ == "__main__":
    main()
