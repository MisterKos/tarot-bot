import os
import json
import random
import logging
from pathlib import Path
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_webhook
from aiohttp import web

# ----------------- –ù–ê–°–¢–†–û–ô–ö–ò -----------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("RENDER_EXTERNAL_URL", "https://tarot-bot-12u6.onrender.com")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8080))

DATA_PATH = Path("data")
DECK_FILE = DATA_PATH / "deck.json"
HISTORY_FILE = DATA_PATH / "history.json"
CARDS_PATH = Path("assets/rw/cards")

logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")
logger = logging.getLogger("tarot-bot")

# ----------------- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø -----------------
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

Bot.set_current(bot)
Dispatcher.set_current(dp)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–æ–¥—É
if DECK_FILE.exists():
    with open(DECK_FILE, "r", encoding="utf-8") as f:
        deck = json.load(f)
    logger.info("–ö–æ–ª–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ data/deck.json")
else:
    deck = {}
    logger.error("deck.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤
if HISTORY_FILE.exists():
    with open(HISTORY_FILE, "r", encoding="utf-8") as f:
        history = json.load(f)
else:
    history = {}

# ----------------- –£–¢–ò–õ–ò–¢–´ -----------------
def save_history():
    with open(HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(history, f, ensure_ascii=False, indent=2)

def draw_cards(n=1):
    return random.sample(list(deck.keys()), n)

def generate_interpretation(cards, situation, spread_type, theme):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞"""
    text = f"‚ú® –¢–µ–º–∞: *{theme}*\nüìñ –°–∏—Ç—É–∞—Ü–∏—è: _{situation}_\n\n"
    if spread_type == "1 –∫–∞—Ä—Ç–∞":
        card = cards[0]
        meaning = deck[card]["meaning"]
        text += f"üîÆ –í–∞—à–∞ –∫–∞—Ä—Ç–∞: *{card}*\n\n{meaning}\n\n"
        text += f"üí° –°–æ–≤–µ—Ç: –¥–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–∏–º —á—É–≤—Å—Ç–≤–∞–º ‚Äî –∫–∞—Ä—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª—é—á –∫ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏."
    elif spread_type == "3 –∫–∞—Ä—Ç—ã":
        parts = ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ"]
        for i, card in enumerate(cards):
            text += f"üÉè {parts[i]} ‚Äî *{card}*\n{deck[card]['meaning']}\n\n"
        text += "‚ú® –ò—Ç–æ–≥: –∫–∞—Ä—Ç–∏–Ω–∞ –ø—Ä–æ—à–ª–æ–≥–æ, –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∏ –±—É–¥—É—â–µ–≥–æ —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –≤ –µ–¥–∏–Ω—ã–π –ø–æ—Ç–æ–∫. –°–¥–µ–ª–∞–π—Ç–µ –≤—ã–≤–æ–¥—ã –∏ –ø—Ä–∏–º–∏—Ç–µ –º—É–¥—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ."
    else:  # –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç
        positions = [
            "–°—É—Ç—å —Å–∏—Ç—É–∞—Ü–∏–∏", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–ü—Ä–æ—à–ª–æ–µ", "–ë—É–¥—É—â–µ–µ",
            "–û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ", "–ë–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–µ", "–í—ã", "–û–∫—Ä—É–∂–µ–Ω–∏–µ",
            "–ù–∞–¥–µ–∂–¥—ã –∏ —Å—Ç—Ä–∞—Ö–∏", "–ò—Ç–æ–≥"
        ]
        for i, card in enumerate(cards):
            text += f"üîπ {positions[i]} ‚Äî *{card}*\n{deck[card]['meaning']}\n\n"
        text += "üåü –ò—Ç–æ–≥ —Ä–∞—Å–∫–ª–∞–¥–∞: –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫—Ä—ã—Ç—ã–µ –≤–ª–∏—è–Ω–∏—è –∏ –ø—É—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–æ–≤–µ—Ç—ã –∫–∞—Ä—Ç."
    return text

async def send_cards(message, cards):
    for card in cards:
        img_path = CARDS_PATH / f"{card}.jpg"
        caption = f"üÉè {card}"
        if img_path.exists():
            with open(img_path, "rb") as photo:
                await message.answer_photo(photo, caption=caption)
        else:
            await message.answer(caption)

# ----------------- –°–û–°–¢–û–Ø–ù–ò–ï -----------------
user_context = {}  # user_id -> {"theme": str, "situation": str, "spread": str}

# ----------------- –ö–ù–û–ü–ö–ò -----------------
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üîÆ –û—Ç–Ω–æ—à–µ–Ω–∏—è", "üíº –†–∞–±–æ—Ç–∞")
    kb.add("üí∞ –§–∏–Ω–∞–Ω—Å—ã", "üåü –û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥")
    return kb

def spread_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("1 –∫–∞—Ä—Ç–∞", "3 –∫–∞—Ä—Ç—ã", "–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç")
    return kb

# ----------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò -----------------
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–∞—Ä–æ-–±–æ—Ç–∞ üîÆ\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —Ä–∞—Å–∫–ª–∞–¥–∞:",
        reply_markup=main_menu()
    )

@dp.message_handler(lambda m: m.text in ["üîÆ –û—Ç–Ω–æ—à–µ–Ω–∏—è", "üíº –†–∞–±–æ—Ç–∞", "üí∞ –§–∏–Ω–∞–Ω—Å—ã", "üåü –û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥"])
async def choose_theme(message: types.Message):
    theme = message.text
    user_context[message.from_user.id] = {"theme": theme}
    await message.answer("üìù –û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ.", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda m: m.from_user.id in user_context and "situation" not in user_context[m.from_user.id])
async def get_situation(message: types.Message):
    user_context[message.from_user.id]["situation"] = message.text
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞:", reply_markup=spread_menu())

@dp.message_handler(lambda m: m.text in ["1 –∫–∞—Ä—Ç–∞", "3 –∫–∞—Ä—Ç—ã", "–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç"])
async def make_spread(message: types.Message):
    user_id = message.from_user.id
    ctx = user_context.get(user_id, {})
    if not ctx or "situation" not in ctx:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏ –æ–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start.")
        return

    spread_type = message.text
    ctx["spread"] = spread_type

    n = 1 if spread_type == "1 –∫–∞—Ä—Ç–∞" else 3 if spread_type == "3 –∫–∞—Ä—Ç—ã" else 10
    cards = draw_cards(n)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    rec = {"theme": ctx["theme"], "situation": ctx["situation"], "spread": spread_type, "cards": cards}
    history.setdefault(str(user_id), []).append(rec)
    history[str(user_id)] = history[str(user_id)][-5:]  # —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
    save_history()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã
    await send_cards(message, cards)

    # –ò—Ç–æ–≥–æ–≤–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
    interpretation = generate_interpretation(cards, ctx["situation"], spread_type, ctx["theme"])
    await message.answer(interpretation, parse_mode="Markdown", reply_markup=main_menu())

    # –°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    user_context.pop(user_id, None)

# ----------------- –í–ï–ë-–°–ï–†–í–ï–† -----------------
async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(app):
    await bot.delete_webhook()
    await bot.close()

async def handle_get(request):
    return web.Response(text="OK")

async def handle_post(request):
    try:
        data = await request.json()
        update = types.Update(**data)
        Bot.set_current(bot)
        Dispatcher.set_current(dp)
        await dp.process_update(update)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ø–¥–µ–π—Ç–∞: {e}")
    return web.Response(text="OK")

def main():
    app = web.Application()
    app.router.add_get("/", handle_get)
    app.router.add_post(WEBHOOK_PATH, handle_post)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    web.run_app(app, host=WEBAPP_HOST, port=WEBAPP_PORT)

if __name__ == "__main__":
    main()
