import os
import json
import random
import logging
from typing import List, Dict
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.executor import Executor

# ------------------------------------------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ------------------------------------------------------------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("tarot-bot")

# ------------------------------------------------------------
# –ö–æ–Ω—Ñ–∏–≥
# ------------------------------------------------------------
TOKEN = os.getenv("BOT_TOKEN", "").strip()
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL", "").strip()

if not TOKEN:
    raise RuntimeError("–ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN")

bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

# ------------------------------------------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–æ–¥—ã
# ------------------------------------------------------------
DECK_PATH = os.path.join(os.path.dirname(__file__), "..", "data", "deck.json")
with open(DECK_PATH, "r", encoding="utf-8") as f:
    DECK = json.load(f)

log.info("–ö–æ–ª–æ–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ –∏–∑ data/deck.json")

# ------------------------------------------------------------
# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ------------------------------------------------------------
def menu_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üîÆ –û—Ç–Ω–æ—à–µ–Ω–∏—è"))
    kb.add(KeyboardButton("üíº –†–∞–±–æ—Ç–∞"))
    kb.add(KeyboardButton("üí∞ –î–µ–Ω—å–≥–∏"))
    kb.add(KeyboardButton("üåå –û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥"))
    return kb

# ------------------------------------------------------------
# –†–∞–±–æ—Ç–∞ —Å –∫–∞—Ä—Ç–∞–º–∏
# ------------------------------------------------------------
def draw_cards(n: int = 3) -> List[Dict]:
    cards = random.sample(DECK, n)
    for c in cards:
        c["reversed"] = random.choice([True, False])
    return cards

def interpret_card(card: Dict) -> str:
    name = card["name"]
    meaning = card["meaning_rev"] if card.get("reversed") else card["meaning_up"]
    orientation = "–ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞—è" if card.get("reversed") else "–ø—Ä—è–º–∞—è"
    return f"<b>{name}</b> ({orientation}): {meaning}"

# ------------------------------------------------------------
# –ì–ª—É–±–æ–∫–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞
# ------------------------------------------------------------
def summarize_spread(cards: List[Dict], theme: str = "–û–±—â–∏–π") -> str:
    majors = [c for c in cards if c.get("arcana") == "major"]
    reversed_cards = [c for c in cards if c.get("reversed")]
    suits = [c.get("suit") for c in cards if c.get("suit")]

    text_parts = []

    # –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ
    if len(majors) >= 2:
        text_parts.append(
            "‚ú® –ü–µ—Ä–µ–¥ –≤–∞–º–∏ –ø–µ—Ä–∏–æ–¥ —Å—É–¥—å–±–æ–Ω–æ—Å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω ‚Äî —Å—Ç–∞—Ä—à–∏–µ –∞—Ä–∫–∞–Ω—ã —É–∫–∞–∑—ã–≤–∞—é—Ç, "
            "—á—Ç–æ —Å–æ–±—ã—Ç–∏—è –±—É–¥—É—Ç –∏–º–µ—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –≤–∞—à—É –∂–∏–∑–Ω—å."
        )
    else:
        text_parts.append(
            "–ö–∞—Ä—Ç—ã –æ—Ç—Ä–∞–∂–∞—é—Ç —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è, "
            "–¥–∞—é—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö —à–∞–≥–æ–≤."
        )

    # –ü—Ä—è–º—ã–µ / –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã–µ
    if reversed_cards:
        text_parts.append(
            "–ü–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã–µ –∫–∞—Ä—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞–ª–∏—á–∏–µ —Å–æ–º–Ω–µ–Ω–∏–π, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –±–ª–æ–∫–æ–≤ "
            "–∏–ª–∏ –∑–∞–¥–µ—Ä–∂–µ–∫ –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ —Å–∏—Ç—É–∞—Ü–∏–∏."
        )
    else:
        text_parts.append("–í—Å–µ –∫–∞—Ä—Ç—ã –≤—ã–ø–∞–ª–∏ –ø—Ä—è–º—ã–º–∏ ‚Äî —ç—Ç–æ —É—Å–∏–ª–∏–≤–∞–µ—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Ä–∞—Å–∫–ª–∞–¥–∞.")

    # –ü–æ –º–∞—Å—Ç–∏
    if suits:
        dominant = max(set(suits), key=suits.count)
        if dominant == "cups":
            text_parts.append(
                "–î–æ–º–∏–Ω–∏—Ä—É—é—Ç –ö—É–±–∫–∏ ‚Äî —ç—Ç–æ —Å—Ñ–µ—Ä–∞ —ç–º–æ—Ü–∏–π –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π. "
                "–ì–ª–∞–≤–Ω–æ–µ —Å–µ–π—á–∞—Å ‚Äî —Å–ª—É—à–∞—Ç—å —Å–µ—Ä–¥—Ü–µ –∏ –±—ã—Ç—å –∏—Å–∫—Ä–µ–Ω–Ω–∏–º."
            )
        elif dominant == "swords":
            text_parts.append(
                "–ú–Ω–æ–≥–æ –ú–µ—á–µ–π –≤ —Ä–∞—Å–∫–ª–∞–¥–µ ‚Äî –ø–µ—Ä–∏–æ–¥ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è, "
                "–∞–Ω–∞–ª–∏–∑–∞ –∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤."
            )
        elif dominant == "pentacles":
            text_parts.append(
                "–ü–µ–Ω—Ç–∞–∫–ª–∏ –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç ‚Äî –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –∂–∏–∑–Ω–∏, "
                "—Ñ–∏–Ω–∞–Ω—Å–∞—Ö –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏."
            )
        elif dominant == "wands":
            text_parts.append(
                "–ñ–µ–∑–ª—ã –≤–µ–¥—É—Ç —Ä–∞—Å–∫–ª–∞–¥ ‚Äî –≤—Ä–µ–º—è –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π, —Å–º–µ–ª—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã."
            )

    # –¢–µ–º–∞
    if theme == "–û—Ç–Ω–æ—à–µ–Ω–∏—è":
        text_parts.append(
            "–¢–µ–º–∞ —Ä–∞—Å–∫–ª–∞–¥–∞ ‚Äî –æ—Ç–Ω–æ—à–µ–Ω–∏—è. –ó–¥–µ—Å—å –ø—Ä–æ—è–≤–ª—è—é—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã –¥–æ–≤–µ—Ä–∏—è, "
            "—á—É–≤—Å—Ç–≤ –∏ –≤—ã–±–æ—Ä–∞ –º–µ–∂–¥—É —Å–µ—Ä–¥—Ü–µ–º –∏ —Ä–∞–∑—É–º–æ–º."
        )
    elif theme == "–†–∞–±–æ—Ç–∞":
        text_parts.append(
            "–¢–µ–º–∞ —Ä–∞—Å–∫–ª–∞–¥–∞ ‚Äî —Ä–∞–±–æ—Ç–∞. –ö–∞—Ä—Ç—ã —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω—ã, "
            "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞ –∏ –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã."
        )
    elif theme == "–î–µ–Ω—å–≥–∏":
        text_parts.append(
            "–¢–µ–º–∞ —Ä–∞—Å–∫–ª–∞–¥–∞ ‚Äî —Ñ–∏–Ω–∞–Ω—Å—ã. –í–∞–∂–µ–Ω –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è–º–∏, "
            "–∞ —Ç–∞–∫–∂–µ —É–º–µ–Ω–∏–µ –≤–æ–≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–Ω—Å—ã."
        )
    else:
        text_parts.append(
            "–û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à –ª–∏—á–Ω—ã–π –ø—É—Ç—å, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —É—Ä–æ–∫–∏ "
            "–∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –≥–∞—Ä–º–æ–Ω–∏–∏."
        )

    # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
    text_parts.append(
        "–ö–∞—Ä—Ç—ã –¥–∞—é—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –Ω–æ –≤—ã–±–æ—Ä –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –∑–∞ –≤–∞–º–∏. "
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –º—É–¥—Ä–æ, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å –º–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑—ã."
    )

    return "\n\n".join(text_parts)

# ------------------------------------------------------------
# –•—ç–Ω–¥–ª–µ—Ä—ã
# ------------------------------------------------------------
@dp.message_handler(commands=["start"])
async def cmd_start(m: types.Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –Ω–∞ –¢–∞—Ä–æ üé¥\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞:",
        reply_markup=menu_kb(),
    )

@dp.message_handler(commands=["menu"])
async def cmd_menu(m: types.Message):
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —Ä–∞—Å–∫–ª–∞–¥–∞:", reply_markup=menu_kb())

@dp.message_handler(lambda m: m.text in ["üîÆ –û—Ç–Ω–æ—à–µ–Ω–∏—è", "üíº –†–∞–±–æ—Ç–∞", "üí∞ –î–µ–Ω—å–≥–∏", "üåå –û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥"])
async def cmd_spread(m: types.Message):
    theme_map = {
        "üîÆ –û—Ç–Ω–æ—à–µ–Ω–∏—è": "–û—Ç–Ω–æ—à–µ–Ω–∏—è",
        "üíº –†–∞–±–æ—Ç–∞": "–†–∞–±–æ—Ç–∞",
        "üí∞ –î–µ–Ω—å–≥–∏": "–î–µ–Ω—å–≥–∏",
        "üåå –û–±—â–∏–π —Ä–∞—Å–∫–ª–∞–¥": "–û–±—â–∏–π",
    }
    theme = theme_map.get(m.text, "–û–±—â–∏–π")
    cards = draw_cards(3)

    # –ö–∞—Ä—Ç–æ—á–∫–∏
    card_texts = [interpret_card(c) for c in cards]
    spread_text = "\n\n".join(card_texts)

    # –ò—Ç–æ–≥
    summary = summarize_spread(cards, theme)

    await m.answer(f"–í–∞—à —Ä–∞—Å–∫–ª–∞–¥ ({theme}):\n\n{spread_text}\n\n{summary}")

@dp.message_handler()
async def on_free_text(m: types.Message):
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥ —á–µ—Ä–µ–∑ /menu.", reply_markup=menu_kb())

# ------------------------------------------------------------
# Webhook handler
# ------------------------------------------------------------
async def webhook_handler(request: web.Request):
    try:
        data = await request.json()
    except Exception:
        return web.Response()
    update = types.Update.to_object(data)
    Bot.set_current(bot)
    Dispatcher.set_current(dp)
    await dp.process_update(update)
    return web.Response()

# ------------------------------------------------------------
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ------------------------------------------------------------
def main():
    app = web.Application()
    app.router.add_post("/webhook", webhook_handler)

    async def on_startup(app_):
        if not RENDER_EXTERNAL_URL:
            log.warning("RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω")
            return
        webhook_url = f"{RENDER_EXTERNAL_URL}/webhook"
        try:
            await bot.set_webhook(webhook_url)
            log.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", webhook_url)
        except Exception as e:
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: %s", e)

    app.on_startup.append(on_startup)

    port = int(os.getenv("PORT", 5000))
    web.run_app(app, host="0.0.0.0", port=port, print=None)

if __name__ == "__main__":
    main()
