export default {
  async fetch(request, env) {
    const BOT_TOKEN = env.BOT_TOKEN;
    const API_URL = `https://api.telegram.org/bot${8162496264:AAEomZ-eUtqf_jESd6VZSpdHBYJsjPgds7o}`;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∞–ø–¥–µ–π—Ç—ã
    if (request.method === "POST") {
      const update = await request.json().catch(() => ({}));
      if (!update.message) {
        return new Response("No message", { status: 200 });
      }

      const chatId = update.message.chat.id;
      const text = update.message.text?.trim() || "";

      // –õ–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥
      if (text === "/start" || text === "/menu") {
        const reply = `üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tarot Bot!
–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞:
1. –ü—Ä–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è ‚ù§Ô∏è
2. –ü—Ä–æ —Ä–∞–±–æ—Ç—É üíº
3. –ü—Ä–æ –¥–µ–Ω—å–≥–∏ üí∞

–ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: –æ—Ç–Ω–æ—à–µ–Ω–∏—è`;
        await fetch(`${API_URL}/sendMessage`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ chat_id: chatId, text: reply }),
        });
      } else if (/–æ—Ç–Ω–æ—à–µ–Ω/i.test(text)) {
        const card = getRandomCard();
        const reply = `üÉè –ö–∞—Ä—Ç–∞ –¥–ª—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π: ${card.name}\n${card.meaning}`;
        await fetch(`${API_URL}/sendMessage`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ chat_id: chatId, text: reply }),
        });
      } else if (/—Ä–∞–±–æ—Ç/i.test(text)) {
        const card = getRandomCard();
        const reply = `üíº –ö–∞—Ä—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã: ${card.name}\n${card.meaning}`;
        await fetch(`${API_URL}/sendMessage`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ chat_id: chatId, text: reply }),
        });
      } else if (/–¥–µ–Ω/i.test(text)) {
        const card = getRandomCard();
        const reply = `üí∞ –ö–∞—Ä—Ç–∞ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤: ${card.name}\n${card.meaning}`;
        await fetch(`${API_URL}/sendMessage`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ chat_id: chatId, text: reply }),
        });
      } else {
        await fetch(`${API_URL}/sendMessage`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            chat_id: chatId,
            text: "–ù–∞–ø–∏—à–∏ /menu, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞ üîÆ",
          }),
        });
      }

      return new Response("OK", { status: 200 });
    }

    // GET-–∑–∞–ø—Ä–æ—Å—ã ‚Üí –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
    return new Response("Tarot Worker active", { status: 200 });
  },
};

// –ü—Ä–æ—Å—Ç–∞—è –∫–æ–ª–æ–¥–∞ –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ
function getRandomCard() {
  const cards = [
    { name: "–®—É—Ç (0)", meaning: "–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –ø—É—Ç–∏, –¥–æ–≤–µ—Ä–∏–µ –º–∏—Ä—É." },
    { name: "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞ (III)", meaning: "–†–æ—Å—Ç, –ø–ª–æ–¥–æ—Ä–æ–¥–∏–µ, –∏–∑–æ–±–∏–ª–∏–µ." },
    { name: "–ë–∞—à–Ω—è (XVI)", meaning: "–í–Ω–µ–∑–∞–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω—ã, —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∏–ª–ª—é–∑–∏–π." },
    { name: "–°–æ–ª–Ω—Ü–µ (XIX)", meaning: "–£—Å–ø–µ—Ö, —Ä–∞–¥–æ—Å—Ç—å, —è—Å–Ω–æ—Å—Ç—å." },
    { name: "–õ—É–Ω–∞ (XVIII)", meaning: "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å, —Ç–∞–π–Ω—ã–µ —Å—Ç—Ä–∞—Ö–∏." },
  ];
  return cards[Math.floor(Math.random() * cards.length)];
}
